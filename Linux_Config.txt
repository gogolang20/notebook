VMware安装

Xshell 下载地址: https://www.netsarang.com/en/free-for-home-school/

Vmware16密钥(按照下面的格式)

ZF71R-DMX85-08DQY-8YMNC-PPHV8

网络连接三种模式

1 桥连接:Linux可以和其他的系统通信,可能造成IP冲突
2 NAT:网络地址转换方式,Linux可以访问外网,不会造成IP冲突
3 主机模式:Linux是一个独立的主机,不能访问外网


Linux系统centos7.6-1810版本
Cestos7.6 1810 DVD版本Linux系统(安装的最简系统)

关闭防火墙:systemctl stop firewalld
开机不启动防火墙:systemctl disable firewalld
查看防火墙状态:systemctl status firewalld

关闭SELinux:vim /etc/selinux/config
修改成:SELINUX=disabled 在重启系统

替换阿里安装源
涉及增删改,先备份,再修改！！！
替换成阿里源网址:http://mirrors.aliyun.com/repo/ 

cd /etc/yum.repos.d/
yum install -y wget
mv CentOS-Base.repo CentOS-Base.repo.bak #备份 
wget -O /etc/yum.repos.d/Centos-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo

清空并建立缓存:
    yum clean all
    yum makecache


软件安装

yum install -y vim
yum install -y man man-pages
yum install -y net-tools
yum install -y git
yum install -y lrzsz  #Linux直接下载或上传的软件
yum install -y gcc 
yum install -y gcc-c++ #已安装

同步时钟
yum install -y ntp
#ntpdate ntp[1-7].aliyun.com  七个服务器
ntpdate ntp1.aliyun.com
clock -w #同步


Linux系统Ubuntu 20.04 LTS版本

设置root用户密码: 切换到root用户操作
sudo passwd root
su root
ufw disable #关闭防火墙

软件安装

sudo apt-get update
sudo apt-get install -y vim 
sudo apt-get install -y gcc
sudo apt-get install -y wget
sudo apt-get install -y curl
sudo apt-get install -y make
sudo apt-get install -y net-tools
sudo apt-get install -y git
sudo apt-get install -y lrzsz    Linux直接下载或上传的软件


ssh登录Ubuntu root 用户方法
apt-get install -y openssh-server
vim /etc/ssh/sshd_config
修改配置文件:
PermitRootLogin yes #prohibit-password

sudo /etc/init.d/ssh restart #重启ssh 服务

Windows和Ubuntu系统之间文件相互复制粘贴
第一步: sudo apt-get autoremove open-vm-tools
第二步: sudo apt-get install open-vm-tools-desktop
然后重启


Golang
wget https://studygolang.com/dl/golang/go1.17.6.linux-amd64.tar.gz
https://studygolang.com/dl/golang/go1.17.6.linux-amd64.tar.gz

vim /etc/profile
vim .bashrc (Ubuntu安装golang需要同时配置root环境变量)
export GOROOT=/usr/local/go
export GOPATH=/root/goproject #ubuntu /home/ubuntu/goproject 
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

mkdir -p /root/goproject/src
source .bashrc
source /etc/profile

再设置一下goproxy:
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
取消代理
go env -u GOPROXY

Windows环境配置
GOPATH
E:\goproject
GOROOT
D:\golang\go
%GOROOT%\bin
GOPROXY
https://goproxy.cn,direct


安装 protobuf
protoc-gen-go:
go get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2
cd /root/goproject/bin
cp protoc-gen-go  /usr/local/bin/

protoc:
mkdir grpc
wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip
unzip protoc-3.14.0-linux-x86_64.zip #解压文件
cp bin/protoc /usr/local/bin/ 

protobuf和插件的 可执行文件一定要放到 /usr/local/bin/ 文件夹下！！！


安装 dlv
$ git clone https://github.com/go-delve/delve.git $GOPATH/src/github.com/go-delve/delve
$ cd $GOPATH/src/github.com/go-delve/delve
$ make install
添加$GOPATH/bin到环境变量, 执行dlv命令 !!!


Docker

阿里云搜索:容器镜像服务-管理控制台-镜像工具
阿里云的docker文档步骤操作
加速器地址: https://vdtkoeuc.mirror.aliyuncs.com
CentOS 7 (使用yum进行安装)  

```
step 1: 安装必要的一些系统工具
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

Step 2: 添加软件源信息
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

Step 3: 更新并安装 Docker-CE
sudo yum makecache fast
sudo yum -y install docker-ce

Step 4: 开启Docker服务
sudo service docker start
```

注意:其他注意事项在下面的注释中
#官方软件源默认启用了最新的软件,您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用,你可以通过以下方式开启。同理可以开启各种测试版本等。
#vim /etc/yum.repos.d/docker-ce.repo
#将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1
#
#安装指定版本的Docker-CE:
#Step 1: 查找Docker-CE的版本:
#yum list docker-ce.x86_64 --showduplicates | sort -r
#Loading mirror speeds from cached hostfile
#Loaded plugins: branch, fastestmirror, langpacks
#docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable
#docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable
#docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable
#Available Packages
#Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)
#sudo yum -y install docker-ce-[VERSION]
#注意:在某些版本之后,docker-ce安装出现了其他依赖包,如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后,需要先安装 docker-ce-selinux。
#yum list docker-ce-selinux- --showduplicates | sort -r
#sudo yum -y install docker-ce-selinux-[VERSION]

#通过经典网络、VPC网络内网安装时,用以下命令替换Step 2中的命令
#经典网络:
#sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo
#VPC网络:
#sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo

阿里云ubuntu安装docker
step 1: 安装必要的一些系统工具
sudo apt-get update
sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
step 2: 安装GPG证书
curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
Step 3: 写入软件源信息
sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
Step 4: 更新并安装 Docker-CE
sudo apt-get -y update
sudo apt-get -y install docker-ce


注意:其他注意事项在下面的注释中
安装指定版本的Docker-CE:
Step 1: 查找Docker-CE的版本:
apt-cache madison docker-ce
docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)
sudo apt-get -y install docker-ce=[VERSION]

通过经典网络、VPC网络内网安装时,用以下命令替换Step 2、Step 3中的命令
经典网络:
curl -fsSL http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
VPC网络:
curl -fsSL http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"


设置Docker镜像加速
vim /etc/docker/daemon.json
{
  "registry-mirrors":["https://vdtkoeuc.mirror.aliyuncs.com"]
}    #阿里源

{
  "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"]
}    #公司

systemctl daemon-reload
systemctl enable docker        #开机启动docker

docker info 报错解决方法:
vim /etc/sysctl.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    net.ipv4.ip_forward=1
sysctl -p #配置生效

sysctl net.ipv4.ip_forward    #查看IP转发功能 开启输出1

journalctl -u docker -l #可以查看报错


Docker-compose
官网安装方式
官网地址: https://docs.docker.com/compose/install/
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose
#卸载
sudo rm /usr/local/bin/docker-compose


docker-compose 离线安装:
GitHub网址:https://github.com/docker/compose/releases 
下载:docker-compose-Linux-x86_64
wget https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
mv docker-compose-Linux-x86_64  docker-compose

chmod +x docker-compose
mv docker-compose  /usr/local/bin


Python安装
#root用户下按照
sudo apt-get install zlib1g-dev #安装依赖
yum install -y zlib-devel

cd Python-3.7.10/ #进入解压后的tgz文件
./configure
make && make install


### Helm安装

```shell
git clone https://github.com/helm/helm.git
cd helm
make
cd bin/
cp helm /usr/local/bin/
helm --help
```

#### Geth

Metamask:
shill123
valve another good poem skill forward rose cinnamon scheme dignity social glass
私钥:0x6dEAa4A4E32a8F8C8c821DC67fA6dB57901E598C

```shell
root用户 ~/project 目录下载
从GitHub clone代码到project 目录
sudo git clone https://github.com/ethereum/go-ethereum.git

git branch -a #查看分支
git checkout v1.10.8 #切换tag 分支 

#make geth:build文件下 脚本需要是unix格式 :set ff=unix
make geth #编译

./build/bin/geth version #查看geth version

./build/bin/geth --datadir ./data #运行客户端
#因为在go-ethereum文件的目录下,数据保存在data的文件内,运行后会再当前目录下创建data文件夹
```

```shell
搭建私链 genesis.json
{
  "config": {
    "chainId": 33, #Ubuntu
    "homesteadBlock": 0,
    "eip150Block": 0,
    "eip155Block": 0,
    "eip158Block": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "berlinBlock": 0,
    "londonBlock": 0
  },
  "alloc": {},
  "coinbase": "0x0000000000000000000000000000000000000000",
  "difficulty": "0x2000",
  "extraData": "",
  "gasLimit": "0x2fefd8",
  "nonce": "0x0000000000000042",
  "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp": "0x00"
}

初始化私有链
#Linux-centos
./geth --datadir /root/goproject/src/go-geth init /root/goproject/src/go-geth/genesis.json

#linux-ubuntu
./geth --datadir /home/ubuntu/goproject/src/go-geth init /home/ubuntu/goproject/src/go-geth/genesis.json

启动私有链
#Linux-centos启动
./wormholes --datadir /root/goproject/src/go-geth --networkid 20220118 --rpc console 2>output.log

#linux-ubuntu启动:未添加新账号
./geth --datadir /home/ubuntu/goproject/src/go-geth --networkid 33 --rpc console 2>output.log
```

#### Redis 5 版本

```shell
cd /root/
wget https://download.redis.io/releases/redis-5.0.12.tar.gz
tar zxf redis-5.0.12.tar.gz
cd redis-5.0.12
#vim README.md #阅读
make #make distclean #编译出错时执行

设置后台启动配置:
vim /etc/profile
export REDIS_HOME=/opt/redis/redis5
export PATH=$PATH:$REDIS_HOME/bin
source /etc/profile
echo $PATH

make PREFIX=/opt/redis/redis5 install #可执行程序放到了另外的目录

cd /root/redis-5.0.12/utils
./install_server.sh #安装
$ Selected config:
$ Port           : 6379
$ Config file    : /etc/redis/6379.conf
$ Log file       : /var/log/redis_6379.log
$ Data dir       : /var/lib/redis/6379
$ Executable     : /opt/redis/redis5/bin/redis-server
$ Cli Executable : /opt/redis/redis5/bin/redis-cli

cd /etc/init.d  #可以查看启动的文件

cd /root/redis-5.0.12/src
./redis-server #启动redis服务端
./redis-cli #启动redis客户端
```

redis6

```shell
wget https://download.redis.io/releases/redis-6.2.6.tar.gz
sudo tar xf redis-6.2.6.tar.gz -C /usr/local/
sudo mv redis-6.2.6/ redis
cd redis/
sudo make
sudo make PREFIX=/usr/local/redis install

```

#### MySQL 5.7

```shell
wget https://dev.mysql.com/get/mysql80-community-release-el7-4.noarch.rpm
rpm -ivh mysql80-community-release-el7-4.noarch.rpm 
yum makecache
yum repolist all | grep mysql
yum repolist enabled | grep mysql #查看可以安装的版本
sudo yum-config-manager --disable mysql80-community #
sudo yum-config-manager --enable mysql57-community #切换到5.7版本
yum repolist enabled | grep mysql
yum install -y mysql-community-server #安装
systemctl start mysqld
sudo grep 'temporary password' /var/log/mysqld.log #查看临时密码
systemctl status mysqld 
mysql -uroot -p #登录
>ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';
mysql -uroot -pMyNewPass4!

https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/ #官网安装参考

查看安装的MySQL版本:mysql --version
查看设置的字符集:show variables like '%char%';
登录:mysql -hlocalhost -uroot -pMyNewPass4!

vim  /etc/my.cnf #末尾添加
character-set-server=utf8
collation-server=utf8_general_ci
[client]
default-character-set=utf8
[mysql]
default-character-set=utf8
```

ubuntu安装MySQL

```shell
wget https://dev.mysql.com/get/mysql-apt-config_0.8.22-1_all.deb
https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/ #安装参考网址

dpkg -i mysql-apt-config_0.8.22-1_all.deb #安装apt源
sudo dpkg-reconfigure mysql-apt-config #配置版本
sudo apt-get update #每次配置后都需要更新 源

sudo apt-get install -y mysql-server #安装完成后自动启动

systemctl status mysql #查看启动状态

mysql -uroot -p123456 #登录,密码是安装时设置的

sudo cat /etc/mysql/debian.cnf #如果没有设置密码

show variables like '%char%'; #不需要设置字符集
```

MySQL授权

```shell
create user root@'%' identified by '123456';
grant all privileges on *.* to root@'%' with grant option;
flush privileges;
```

#### 安装 java

```shell
#rpm包安装 配置环境变量
vim /etc/profile
export JAVA_HOME=/usr/java/default
export CLASSPATH=.
export PATH=$PATH:$JAVA_HOME/bin
source /etc/profile
```

#### 安装 node js

```shell
wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz
tar -xf node-v12.18.1-linux-x64.tar.xz
mkdir /usr/node
mv node-v12.18.1-linux-x64 /usr/node/
vim /etc/bashrc
export PATH=$PATH:/usr/node/node-v12.18.1-linux-x64/bin
. /etc/bashrc

#安装yarn
npm install -g yarn
yarn --version
```

### Linux网络相关

```shell
Centos7网络管理优化
$ systemctl stop NetworkManager #临时关闭
$ systemctl disable NetworkManager #永久关闭

Centos7配置网卡:设置服务器静态IP地址
vi /etc/sysconfig/network-scripts/ifcfg-ens32
    BOOTPROTO="dhcp"修改成 "static"
    删除UUID
    添加(示例):
GATEWAY=本机IP.2
IPADDR=本机IP
NETMASK=255.255.255.0
DNS1=本机IP.2
DNS2=114.114.114.114

$ systemctl restart network #重启网络服务
```

```shell
ubuntu 配置静态IP
文件位置
sudo  vim /etc/netplan/01-network-manager-all.yaml
  ethernets:
    ens32:
        addresses: [192.168.211.135/24] #静态IP地址和掩码
        dhcp4: no
        optional: true
        gateway4: 192.168.211.2 #网关地址
        nameservers:
            addresses: [223.5.5.5,223.6.6.6] #DNS服务器
重启
sudo netplan apply


# Let NetworkManager manage all devices on this system
network:
  ethernets:
    ens32:
        addresses: [192.168.211.135/24]
        dhcp4: no
        optional: true
        gateway4: 192.168.211.2
        nameservers:
            addresses: [223.5.5.5,223.6.6.6]
  version: 2
  renderer: NetworkManager
```

光盘救援模式
    开机选中:Troubleshooting-->Rescue a CentOS system
如果使用U盘,建议买个2.0接口烧制好的系统,或者刻录成DVD光盘

### 什么是Shell？

​    Shell是一个程序,用C语言开发的
​    Shell是用户和系统之间的一个桥梁
​    Shell是一种程序设计的语言
Shell在哪去使用？
​    日常运维过程中,用户需要跟系统交互
​    修改系统变量
​    执行系统中的脚本
​    修改服务器固定IP地址等一些自动化运维的任务

如何使用Shell？

​    交互式:
​        命令行模式:CLI Shell
​        图形界面模式:嵌入式开发使用,GUI Shell
​    非交互式:Shell脚本

命令行模式
    命令行提示符:[当期用户@主机名称 当前目录名]

### Linux文件/文档命令

管理员用户 #
$ 普通用户
快捷键:Ctrl+a；Ctrl+e；Ctrl+f 光标向右移动；Ctrl+b 光标向左移动
Ctrl+insert 复制；shift+insert 粘贴；Ctrl+d 退出终端
/ 根目录
~ home目录
. 当前目录
.. 当前目录的上一级目录
cd - 进入上一次进入的目录
mkdir -p 创建一个多级目录
rm -rf  -r是递归  -f是强制  删除！！！谨慎使用
cp -r oldname.file newname.file  -r 用来递归复制目录    \cp -r oldname.file newname.file    强制覆盖
scp  srcFile  root@IP:destFile  从文件源主机地址拷贝到目标主机的位置mkdir .nameDir     创建隐藏文件夹
echo > 输出重定向覆盖的方式写入 
echo >> 输出重定向追加的方式写入 
echo 2>> 错误信息追加
echo &>> 正确和错误信息均写入一个文件
cat >> a.txt <<EOF  写入内容到文件
tac cat的倒叙输出
nl 显示内容和行号
more less -n 分页显示 一页一页的翻,显示n行内容,b是向上翻
head tail -n 显示n行内容

### vim编辑器

命令模式: 默认的模式; 按i进入编辑模式,从光标位置插入；大写I进入,从行首进入插入信息
编辑模式: 也叫插入模式, 可以输入内容；键盘按end键 进入行尾 home键进入行首；大写ZZ 可以保存退出
  按u 可以撤销操作
  gg 到第一行: G到最后一行；num + G 到指定的num行
  yy 复制光标所在行: nyy 向下复制n行；p 粘贴
  dd 删除光标所在行: ndd 向下删除n行
  $ 到光标行尾: n$ 到第n行的行尾
​命令行模式:输入英文格式冒号 :

set nonu 取消行号    set nu 显示行号
w 文件写入磁盘
s/old/new 文本替换,从左到右第一次出现的位置
s/old/new/g 替换整行
%s/old/new/g 替换整篇文档关键字为新的内容
/keyword 查找keyword         


### Linux系统目录
bin: 存放的是常用命令
root: 管理员目录
sbin:超级管理员
boot:启动引导 核心文件 镜像文件
dev:Linux存放设备的访问方式
home: 家目录 && 用户自己的文件
etc:存放系统管理配置文件和子目录
lib:系统或应用所依赖的动态链接库
usr: 比较重要, 用户很多应用和文件存放
tmp: 临时文件
sys: 系统文件
media: 媒介 光盘或U盘
mnt: 系统给用户临时挂载的目录
opt: 安装软件
proc: 内存映射
var: 日志

### CentOS 7.6忘记Root密码

指定运行级别:init 0-6
可以帮助忘记密码进入远行级别1,重新设置密码
1:开机选择页面按e键
2:进入新页面后再UTF8 的后面输入:init=/bin/sh 然后按CTRL+x进入单用户模式
3:输入:mount -o remount,rw /
4:输入:passwd   修改成新的密码
5:输入:touch /.autorelabel
6:输入:exec /sbin/init
系统重启后生效

### Linux任务调度

crontab -e 执行任务调度
crontab -l 查看当前的任务调度列表
crontab -r 终止任务调度
Systemctl  restart  crond 重启任务调度

### Linux文件通配符

*匹配零个或多个字符
？匹配任何单个字符
~ 当前用户家目录
~mage 用户mage家目录
~+ 当前工作目录
~- 前一个工作目录
[0-9] 匹配数字范围
[a-z] 字母
[wang] 匹配列表中的任何一个字符
[ ^wang ] 匹配列表中的所有字符以外的字符

### 磁盘说明

磁盘:
    按接口分类:SATA 串口硬盘；SCSI；SAS；SSD PCI-E
    按存储方式分类:机械硬盘；固态硬盘
    按外形尺寸分类:2.5寸；3.5寸
磁盘阵列卡:
    什么是阵列卡:用来RAID 廉价冗余磁盘阵列；把若干个磁盘按照一定要求组成一个整体
    整个磁盘阵列由阵列控制器来管理
    在哪使用:服务器；高端台式机、笔记本
    为什么要使用:获得更高的容量；获得更高的性能；获得更高的冗余
    如何使用阵列卡:dell H-330/310/330 H-700/730730P
        BIOS开机自检进入设置:ctrl+R 进入页面
    RAID级别:
        RAID0:读写速度快；没有容错
        RAID1:完全容错；成本高(一半空间做备份)
        RAID5:具备多任务,容错能力
        RAID10:速度快,容错能力；成本高
        RAID50:
远程卡:
    在哪用:设置服务器BIOS硬件；配置RAID卡
    如何使用:输入用户名和密码 登录后进入,在虚拟控制台内操作

### Linux操作命令

#### 关机重启

```
sync :可以将内存的数据写入磁盘中 sync --help可以查看细节
init 0    关机
shotdown now    关机
reboot  重启系统
init 6    重启系统
```

#### 用户管理

```
添加用户:useradd  [选项] 用户名

指定家目录:useradd -d 指定目录 用户名

删除用户:
    userdel 用户名 (保留了 /home/ 下的目录)
    userdel -r 用户名(不保留 /home/ 下的目录)

查询用户信息:id 用户名

切换用户:su 或 su -

查看当前用户:whoami 或 who am i
```

#### 用户组管理

添加用户组:groupadd 组名

增加用户时直接加上组:useradd -g 用户组 用户名

修改用户组:usermod -g 用户组 用户名

删除用户组:

查看密码的目录:/etc/shadow

#### 指定运行级别

```
init [ 0-6 ]    切换运行级别

0:关机
1:单用户(找回密码)
2:多用户状态没有网络服务
3:多用户状态有网络服务
4:系统未使用保留给用户
5:图形界面
6:重启系统
```

#### 修改主机名:

```
sudo vim /etc/hosts
IP地址    映射的主机名
sudo vim /etc/hostname
```

#### 时区时间校准

```
sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
sudo apt install ntpdate
sudo ntpdate ntp1.aliyun.com
```

### route命令

```
route命令:查看系统中路由表信息
route -n
添加网段:route add -net 192.168.0.0 netmask 255.255.255.0 dev ens33
添加网关:route add -net 192.168.0.0/24 gw 192.168.0.1
删除条目:route del -net 192.168.0.0/24 gw 192.168.0.1
IP命令:
ip r
ip route add:ip route add 182.168.0.0/24 via 10.0.0.2
```

### Linux操作系统

cURL是什么,有什么作用？
cURL是一个可以终端命令行下使用URL语法执行的开源文件传输工具。cURL支持SSL证书,
HTTP POST,HTTP PUT,FTP上传,基于HTTP表单的上传,代理,HTTP / 2,cookie,
用户+密码认证(Basic,Plain,Digest,CRAM-MD5,NTLM,Negotiate和Kerberos),文件转移简历,代理隧道等

Cpu与内存的三条线:控制线、数据线、地址线
地址线多少决定可以读取的内存大小,电脑最小读取单位为1Byte,32条线最大可以读取4G内存。

进程和线程有什么区别？

进程是OS分配资源的基本单位,线程时执行调度的基本单位,分配资源最重要的是内存空间,线程调度执行(线程共享进程的内存空间,没有自己独立的内存空间)

协程 Coroutine

一种用户态的轻量级线程,协程的调度完全由用户控制,协程拥有自己的栈。协程调度切换时,将寄存器上下文和栈保存到其他地方,在切回来的时候,寄存器上下文和栈,直接操作栈则基本没有内核切换的开销,可以不加锁的访问上下文的切换非常快。

协程和线程的比较

| 比较项  | 线程                            | 协程                                         |
| ---- | ----------------------------- | ------------------------------------------ |
| 占用资源 | 初始单位为1M,固定不可变                 | 初始一般为2K,可随需要而增大                            |
| 调度所属 | 由OS的内核完成                      | 由用户完成                                      |
| 切换开销 | 涉及模式切换(从用户态切换到内核态),16个寄存器的刷新等 | 只有三个寄存器的值修改 -PC / SP / DX                  |
| 性能问题 | 资源占用太高,频繁创建销毁会带来严重的性能问题       | 资源占用小,不会带来严重的性能问题                          |
| 数据同步 | 需要用锁等机制确保数据的一致性和可见性           | 不需要多线程的锁机制,在协程控制中不加锁,只需要判断状态就好了,所以 比多线程高很多 |

# 附录

```shell
查看设置git config --list
设置:
$ git config --global user.name ""
$ git config --global user.email “johndoe@example.com”
删除:
$ git config --global --unset user.name ""
$ git config --global --unset user.email ""
```

nohup 命令:启动程序使用
