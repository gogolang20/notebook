# Nginx

## Nginx 一

nginx:可以做负载均衡器的keepalive高可用
应用服务的高可用,可以前面做LVS
下载官网源码到 /root目录 
wget http://nginx.org/download/nginx-1.21.1.tar.gz
tar -zxvf nginx-1.21.1.tar.gz 解压
yum install -y gcc
yum install -y pcre pcre-devel 提前安装编译需要的依赖
yum install -y zlib zlib-devel 提前安装编译需要的依赖
yum install -y openssl openssl-devel
cd /root/nginx-1.21.1

./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module #编译安装到指定目录
make
make install 
cd /usr/local/nginx/sbin #启动
./nginx #启动后可以访问,默认端口是80
http://192.168.245.148/
./nginx -s stop    #关闭nginxs
nginx -t           #查看状态

可以脚本设置nginx开机服务: 
vim /usr/lib/systemd/system/nginx.service

systemctl daemon-reload #重新load

添加防火墙策略:
firewall-cmd --zone=public --add-port=80/tcp --permanent
firewall-cmd --reload


## Nginx 二

### 域名、dns与http协议

docker容器化技术:作为应用服务器(解决资源过剩的问题)
kvm:虚拟化(解决资源过剩的问题)
主机:独占服务器的cpu、内存、磁盘 资源

```
域名先通过本机hosts解析 --> DNS解析成IP地址

DNS管理 域名解析

C:\Windows\System32\drivers\etc
打开 hosts 文件,进入配置
192.168.152.129 fangxinkan.com

hosts找不到会在进入配置的DNS服务器查询域名所对应的IP
```

### 虚拟主机

一台主机上虚拟出多个

基于IP的虚拟主机(一块主机绑定多个IP地址)

基于域名的虚拟主机(server_name)

基于端口的虚拟主机

## Nginx 三

```
cd /usr/local/nginx/conf
vim nginx.conf #修改配置
#可以设置不同网页文件路径或参数等
一台主机跑多个服务器,复制一份server部分,可以通过端口号区分server节点,listen 监听的端口号
    duozuiyu.com 192.168.245.128
    fangxinkan.com 192.168.245.128

(可以不用注册域名  再windows本机C:\Windows\System32\drivers\etc的 hosts文件中配置:IP 域名地址)

示例一:配置不同的 listen 端口
    server {
        listen       88;
        server_name  localhost; #配置对应的域名

        location / {
            root   html;
            index  index.html index.htm; 
        }
    }

示例二:示例一基础上修改 资源路径
        location / {
            root   /html/fangxinkan.com; #html下创建一个fangxinkan.com文件夹,放置资源
            index  index.html index.htm; 
        }

示例三:实例二基础上配置server_name,listen 端口修改回80
    server_name  fangxinkan.com;
```

 一个nginx服务,访问同一个端口,域名是如何区别开来的？？？
 依靠https协议request header的Host 信息区分,解析后定位到nginx的 server_name
一张网卡可以配置多个IP

## Nginx 四

### 反向代理

正向代理与反向代理
正向代理是无法访问的内容,通过代理 请求回想要的数据
反向代理是服务端向外提供的统一的接入入口

### 基于反向代理的负载均衡

```
cd /usr/local/nginx/conf
vim nginx.conf
    server {
        listen       80;
        server_name  localhost;

        location /baidu {
        proxy_pass http://baidu.com;
        }

    }
```

```
一台虚拟机开启多个nginx服务；
    80端口作为服务
    88、99端口 提供静态服务

cd /usr/local/nginx/conf #80端口
cp nginx.conf nginx-88.conf
cp nginx-88.conf nginx-99.conf

#配置88 99端口的配置文件
修改listen 端口号,和location 的root 对应index.html路径,index 的文件内容
        location / {
            root   /www/88;
            index  index.html index.htm;
        }
mkdir -p /www/88
mkdir -p /www/99
cd /www/88/ #同样再99目录下创建index.html文件
vim index.html
    hi this is 88

cd /usr/local/nginx/sbin/ 
./nginx -c conf/nginx-88.conf #启动 -c 指定配置文件
./nginx -c conf/nginx-99.conf #启动 #不需要回退目录

http://192.168.245.170:88/
http://192.168.245.170:99/

#配置80 端口的配置文件
在主的代理nginx修改proxy_pass 网址后面添加对应的88或99端口号
        location / {
            proxy_pass http://192.168.245.170:99; #只能代理一个端口 #配置多个需要配合 upstream
        }

upstream反向代理:
    upstream test {
        server 192.168.245.170:88;
        server 192.168.245.170:99;
    }
    server {
        listen       80;
        server_name  localhost;
        location / {
           proxy_pass http://test;
        }
    }

ps -ef | grep nginx #脚本重启可能杀死其他的进程
./nginx -c conf/nginx-99.conf
./nginx -c conf/nginx-88.conf
tail -f /usr/local/nginx/logs/error.log #查看保持日志
```

### 代理服务器的安全问题

https --> 通过301 307 将http的请求重定向到 https 

## Nginx 五

### 公网配置HTTPS

```
需要先有一个域名(免费签名:阿里云)
设置域名解析:
将域名解析到 服务器的公网网址

cd /usr/local/nginx/conf 
配置https 443端口的 server
    # 证书文件
    # key文件

#参考
server {
    listen 443 ssl;
    server_name mianshihahaha.com;
    ssl_certificate mianshihahaha.com.crt;
    ssl_certificate_key mianshihahaha.com.key;

    location / {
        root /www/mianshihahaha.com;
    }
}
```

#### 增加nginx 的 ssl模块方法

```shell
增加nginx 的 ssl模块方法
重新编译,增加下方参数
--with-http_stub_status_module --with-http_ssl_module 

cd /usr/local/nginx/sbin
./nginx  -V #查看模块
    nginx version: nginx/1.21.1
    built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) 
    configure arguments: --prefix=/usr/local/nginx

解决方案操作步骤:
1  ./configure --with-http_stub_status_module --with-http_ssl_module
2  make #不要执行make install
3  备份
    cd /usr/local/nginx/sbin
    mv nginx nginx.bak
4  替换文件
    cd /root/nginx-1.21.1/objs #objs是编译完成后放置文件的地方
    cp nginx /usr/local/nginx/sbin/ #复制
5  启动nginx
```

```
申请证书(腾讯云)
https://cloud.tencent.com/act/pro/ssl?fromSource=gwzcw.3965189.3965189.3965189&utm_medium=cpc&utm_id=gwzcw.3965189.3965189.3965189&bd_vid=11867580160803194543
免费ssl立即领取
领取成功后,进入腾讯云 控制台,可以查看到证书
    提交资料,绑定到域名上
    验证:DNS验证、文件验证

验证通过后,再腾讯云找到对应的安装部署文档
    Nginx服务器SSL 证书安装部署！！！
        文件放到 nginx的conf文件夹下
```

### Java项目的负载均衡

```
spring生成的jar包直接上传到虚拟机
java -jar XXName #启动

后面tomcat的端口外网不暴露
nginx配置 proxy_pass 做反向代理
```

## Nginx 六 (没有视频,跳过)

## Nginx 七

### 动静分离

```
静态文件放到nginx服务器
    配置文件添加 proxy_pass 反向代理
    增加配置文件 location 的路径 #最简单的动静分离
    location 中不需要index,配置 root  到对应静态文件中

location 中 alias 与 root 的区别！！！
location /css {
    alias /usr/local/nginx/static/css;
    root /usr/local/nginx/static;
}
alias需要再,目录后面添加location后面的路径
```

### Url重写！！！

```
rewrite:
http://localhost:8080/account/list?pageNum=1
http://localhost:8080/account/list#pageNum=1

rewrite    <regex>    <replacement>    [flag]
关键字       正则          替换内容       flag标记
将客户访问的地址 匹配到nginx中真正的内容

rewrite不需要写在 location中
```

### 短网址是如何实现的

```
可以基于rewrite 实现

nginx获取 URL:key后 直接连接redis
```

## Nginx 八

```
搭建php站点:
搭建网址:https://oneinstack.com/
cd /root
wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz
tar xf oneinstack-full.tar.gz
cd oneinstack
./install 脚本
####################################
Please input SSH port(Default: 22): 
Do you want to enable iptables? [y/n]: n
Do you want to install Web server? [y/n]: y
Please input a number:(Default 1 press Enter) 
Do you want to install Apache? [y/n]: y
Please input a number:(Default 1 press Enter) 
Please input a number:(Default 1 press Enter) 
Please input a number:(Default 5 press Enter) 
Do you want to install Database? [y/n]: y
Do you want to install opcode cache of the PHP? [y/n]: n
Do you want to install Pure-FTPd? [y/n]: n
...
```

```
博客系统:
wordpress官网:https://wordpress.org/download/
可以参考docker官网wordpress部署
```

```
cms系统:新闻发布系统
http://www.dedecms.com/
```

## Nginx 九:openresty

#### 搭建Lua站点！！！

```
官网:http://openresty.org/en/

wget https://openresty.org/download/openresty-1.19.9.1.tar.gz
yum install -y pcre pcre-devel 提前安装编译需要的依赖
yum install -y zlib zlib-devel 提前安装编译需要的依赖
yum -y install openssl openssl-devel

./configure --with-http_stub_status_module --with-http_ssl_module

配置文件修改
        location /lua {
            content_by_lua   'ngx.say("hello world")';
        }
###############################################
        location /lua {
            default_type text/html;
            content_by_lua   'ngx.say("hello world")';
        }
http://192.168.245.171/lua #可以正常显示 hello world
###############################################
cd /usr/local/openresty/nginx/conf
vim 001.lua
    ngx.say("hello world")
    #配置文件
        location /lua2 {
            default_type text/html;
            content_by_lua_file conf/001.lua;
        }
http://192.168.245.171/lua2
```

```
# include 应用外部文件
cd /usr/local/openresty/nginx/conf
vim lua.conf
    content_by_lua_file conf/001.lua;
    #配置文件
        location /lua3 {
            default_type text/html;
            include lua.conf;
        }
http://192.168.245.171/lua3
###############################################
        location /lua {
            default_type text/html;
            content_by_lua_block {
                ngx.say("hello world")
                ngx.say("hello world1")
                ngx.say("hello world2")
                }
        }
#content_by_lua_block 应用
```

#### nginx热部署配置

```
1 关闭缓存,重启后生效
2 配置位置
    http {
        server {
            lua_code_cache off;
        }
    }

3 热部署需要写在外部的lua文件中,必须使用 content_by_lua_file 
```

```
lua读取nginx数据的常用方法
    ngx.var 参数
获取nginx url中的单一变量
    content_by_lua_block {
        ngx.say(ngx.var.arg_a)
    }
###############################################
获取 URI 请求所有参数
    if else 逻辑判断
    循环 迭代器 表 简单使用

cd /usr/local/openresty/nginx/conf
vim 004.lua
#文件内容
local uri_args = ngx.req.get_uri_args()

for k, v in pairs(uri_args) do
    if type(v) == "table" then
        ngx.say(k, " : ", table.concat(v, ", "), "<br/>")
    else
        ngx.say(k, ": ", v, "<br/>")
    end
end
#配置
        location /lua2 {
            default_type text/html;
            content_by_lua_file conf/004.lua;
        }
http://192.168.245.171/lua2?name=1&page=88 #访问显示
http://192.168.245.171/lua2?name=1&page=88&page=33
```

ngx.req.get_headers

```
获取nginx请求头信息
cd /usr/local/openresty/nginx/conf
vim 005.lua
#文件内容
local headers = ngx.req.get_headers()
ngx.say("Host : ", headers["Host"], "<br/>")
ngx.say("user.agent : ", headers["user.agent"], "<br/>")
ngx.say("user.agent : ", headers.user_agent, "<br/>")

for k, v in pairs(headers) do
        if type(v) == "table" then
                ngx.say(k, " : ", table.concat(v, ", "), "<br/>")
        else
                ngx.say(k, ": ", v, "<br/>")
        end
end
#配置
        location /lua5 {
            default_type text/html;
            content_by_lua_file conf/005.lua;
        }
http://192.168.245.171/lua5?name=1&page=88&page=33
```

## 亿级流量多级缓存第二版 第一节

分布式系统与高并发系统架构

#分布式系统数据一致性 可用性与网络分区容错性

```
C --> 一致性 --> 分布式系统,强一致性影响可用性

A --> 单机可用性 --> 数据不准确

P --> 分区容错性 --> 默认网络是不可靠的,容忍

CAP定理只能满足其中两个,无法全部满足
```

```
BASE理论:例如zookeeper
    基本可用
    Soft status
    最终一致性
```

## 亿级流量多级缓存第二版 第二节

### 流量接入层

```
访问域名 --> 动态DNS解析 电信IP/联通IP
(可以选择DNS解析的地址)

CDN服务器:内容分发网络
```

## 亿级流量多级缓存第二版 第三节

```
流量网关 --> 业务网关

分布式:服务横向拆分
集群化:单个服务纵向拆分成多个节点

计算密集型
IO密集型
```

# Tengine

## Tengine原理、对比、部署、配置、虚拟主机

### Tengine安装

```shell
cd /root
wget http://tengine.taobao.org/download/tengine-2.3.3.tar.gz
tar xf tengine-2.3.3.tar.gz
/root/tengine-2.3.3
./configure --prefix=/usr/local/tengine

yum install -y gcc
yum install -y pcre pcre-devel 提前安装编译需要的依赖
yum install -y zlib zlib-devel 提前安装编译需要的依赖
yum install -y openssl openssl-devel

mkdir /usr/local/tengine/
make && make install

cd /usr/local/tengine/sbin
./nginx
./nginx -s stop 

vim /etc/init.d/nginx #添加 编辑好的启动脚本
chmod +x /etc/init.d/nginx 
```

### 配置文件

```shell
cd /usr/local/tengine/conf
vim nginx.conf
配置文件说明
worker_processes  4; #配置一般与CPU个数相等
events {
    worker_connections  1024; #每个进程建立的最大连接数
    #受到服务器内核每个进程能够打开多少文件限制
}

cat /proc/sys/fs/file-max # 94488
# ulimit  可以设置限制数
cat /proc/sys/fs/file-nr #当前句柄使用数

#重点模块
通过nginx可以实现虚拟主机的配置,nginx支持三种类型的虚拟主机配置
    基于ip的虚拟主机, (一块主机绑定多个ip地址)
    基于域名的虚拟主机(servername)
    基于端口的虚拟主机(listen如果不写ip端口模式)
http {
    include       mime.types; # 引入外部文件
    default_type  application/octet-stream;

    server { #一个 server 就是一个主机
        listen       80;
        server_name  localhost; #内网是主机名  外网是域名

        sendfile        on; #yum install -y man man-pages
        # man 2 sendfile 
        #tcp_nopush     on; #在linux/Unix系统中优化tcp数据传输,仅在sendfile开启时有效

        keepalive_timeout  65; #长连接超时时间,单位是秒

        #gzip  on;

        location / { #映射/虚拟目录 
            root   html; #相对于nginx 当前家目录的 html文件夹
            root   /var/data/www1; #root 是关键字,可以修改默认位置
            index  index.html index.htm; #默认访问的网页 
        }

         location /doc { # 网站URL ？？？后续在理解路径原则
            root   /var/data/www2;
            #mkdir -p /var/data/www2
            index  index.html index.htm; #默认访问的网页 
        }

    }
}
```

```
location:
location [ = | ~ | * | ^ ] uri { ... }

location URI {} 对当前路径及子路径下的所有对象都生效；

location = URI {} 注意URL最好为具体路径。 精确匹配指定的路径,不包括子路径,因此,只对当前资源生效；

location ~ URI {} location ~* URI {} 模式匹配URI,此处的URI可使用正则表达式,区分字符大小写,*不区分字符大小写；

location ^~ URI {} 禁用正则表达式

优先级:= > ^~ > |* > /|/dir/
location配置规则

location 的执行逻辑跟 location 的编辑顺序无关。 矫正:这句话不全对,“普通 location ”的匹配规则是“最大前缀”,因此“普通 location ”的确与 location 编辑顺序无关；

但是“正则 location ”的匹配规则是“顺序匹配,且只要匹配到第一个就停止后面的匹配”；

“普通location ”与“正则 location ”之间的匹配顺序是？先匹配普通 location ,再“考虑”匹配正则 location 。

注意这里的“考虑”是“可能”的意思,也就是说匹配完“普通 location ”后,有的时候需要继续匹配“正则 location ”,有的时候则不需要继续匹配“正则 location ”。两种情况下,不需要继续匹配正则 location :

    ( 1 )当普通 location 前面指定了“ ^~ ”,特别告诉 Nginx 本条普通 location 一旦匹配上,则不需要继续正则匹配；
    ( 2 )当普通location 恰好严格匹配上,不是最大前缀匹配,则不再继续匹配正则
```

## Tengine 反向代理、负载均衡、 session共享 等

### 反向代理

通常的代理服务器, 只用于代理内部网络对Internet的连接请求, 客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求,最终达到客户机上网的目的。

反向代理(Reverse Proxy)方式是指以代理服务器来接受internet上的连接请求, 然后将请求转发给内部网络上的服务器,并将从服务器上得到的结果返回给internet上请求连接的客户端,此时代理服务器对外就表现为一个反向代理服务器

```
proxy_pass关键字:
location /baidu {
    proxy_pass https://www.baidu.com/;
}
http://192.168.152.136/baidu 
```

### IP访问控制

### 用户认证访问

模块ngx_http_auth_basic_module 允许使用“HTTP基本认证”协议验证用户名和密码来限制对资源的访问。

```
location ~(.*)\.avi$ {
    auth_basic  "closed site";
    auth_basic_user_file conf/users;
}
```

httpd-tools

```
yum install httpd
htpasswd -c -d /usr/local/users name
```

### nginx访问状态监控

```
location /basic_status {
    stub_status on;
}
```

### 反向代理配合upstream使用

```
upstream 写在server 外部
    upstream httpds {
        server 192.168.245.169:80;
        server 192.168.245.168:80;

        check interval=3000 rise=2 fall=5 timeout=1000 type=http; #健康检查模块
        check_http_send "HEAD / HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }

    location / {
        proxy_pass httpds;
    }

http_proxy 本地磁盘缓存: nginx本地磁盘缓存
缺点: 磁盘IO慢
适合缓存静态的html
```

#### 健康检查模块

配置一个status的location

```
location /status {
        check_status;
    }
```

在upstream配置如下

check interval=3000 rise=2 fall=5 timeout=1000 type=http;
check_http_send "HEAD / HTTP/1.0\r\n\r\n";
check_http_expect_alive http_2xx http_3xx;


附录
nginx官网: http://nginx.org/
核心模块配置文档: http://nginx.org/en/docs/http/ngx_http_core_module.html

腾讯云: https://cloud.tencent.com/act/pro/ssl?fromSource=gwzcw.3965189.3965189.3965189&utm_medium=cpc&utm_id=gwzcw.3965189.3965189.3965189&bd_vid=11867580160803194543

Tengine官网: http://tengine.taobao.org/
Tengine资料: https://github.com/bjmashibing/InternetArchitect/tree/master/04%20Nginx%20Tengine

参考域名网站: http://www.juming.com/

