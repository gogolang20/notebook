资料地址
https://hardcore.feishu.cn/docs/doccnMRVFcMWn1zsEYBrbsDf8De#

Raft论文
https://raft.github.io/

视频地址
https://www.bilibili.com/video/BV1CK4y127Lj?p=3&spm_id_from=333.788.top_right_bar_window_history.content.click
#---------------------------------------#---------------------------------------#
1 一致性算法的介绍
#---------------------------------------#---------------------------------------#

如何多快好省的对大规模数据集进行存储和计算？(单机性能瓶颈)
1 更好的机器
2 更多的机器

如何让跨网络的机器之间协调一致的工作？(网络中 消息丢失 消息延迟 消息成功 消息失败)
1 状态的立即一致
2 状态的最终一致

如何应对网络的不可靠及节点的失效？(集群状态)
1 可读写
2 可读
3 不可用


1 输入:写入命令
2 输出:所有节点最终处于相同的状态
3 约束
	a: 网络不确定性
	b: 基本可用性
	c: 不依赖时序
	d: 快速响应

ETCD如何同步数据?
1 初始化一个 leader 节点,负责发送日志到其他 follower, 并决定日志的顺序
2 当读请求到来时,任意节点都可以读,而写请求只能重定向到 leader 进行
3 leader 先写入自己的日志, 然后同步给半数以上节点, follower 表示都ok了, leader 才提交日志(快速响应)
4 日志最终由 leader 先按顺序应用于状态机,其他 follower 随机应用到状态机
5 当 leader 崩溃后,其他追随者通过心跳感知并选举出新的领导者继续集群的正常运转(可用性)
6 当有新的节点加入或退出集群,需要将配置信息同步给整个集群


#---------------------------------------#---------------------------------------#
2 数据结构
#---------------------------------------#---------------------------------------#
三种角色: leader follower candidate(候选人)

1 所有节点启动时都是 follower, 启动心跳计时器
	收到后重置计时器
	超时没有收到 leader 心跳就改变自身状态到 candidate
2 成为 candidate 后会立即发起投票,选举超时计时器
	投票成功,选举成功,收到票数足够,成为 leader
	选举失败,超时,再次更新自己状态,还是 candidate, 重新发起一轮新的投票过程
	集群已经选出领导者,收到心跳,状态修改成 follower

脑裂问题:给 leader 分配任期数,心跳过程中同步任期数
leader 两个功能:发送心跳,同步日志
同时启动节点(选票瓜分问题):心跳,选举 超时计时器时间再一个随机范围内(150-300ms)


通用持久性状态
参数         解释
currentTerm  服务器已知最新的任期(在服务器首次启动的时候初始化为0, 单调递增)
votedFor  当前任期内收到选票的候选者id 如果没有投给任何候选者 则为空
log[]  日志条目,每个条目包含了


通用易失性状态(内存当中)

领导者上的易失性状态(内存当中)


日志同步策略
已提交日志
未提交日志


#---------------------------------------#---------------------------------------#
3 RPC 实现
#---------------------------------------#---------------------------------------#
1 candidate 发起的选举投票RPC 到 follower 或者 candidate

2 leader 发起RPC到跟随者
	a 日志追加
	b 心跳通知


请求投票(选举 leader)
	跟随着变更为候选人后
	选举超时后
请求参数
term  候选人的任期号
candidate  请求选票的候选人的Id
lastLogIndex  候选人的最后日志条目的索引值
lastLogTerm  候选人最后日志条目的任期号
返回参数
term  当前任期号,以便与候选人去更新自己的任期号
voteGranted  候选人赢得了此张选票时为真


追加日志&心跳(leader 调用) #空日志作为心跳更新
1 客户端发起写命令请求时
2 发送心跳时
3 日志匹配失败时

请求参数
term  
leaderId
prevLogIndex
prevLogTerm
ertries[]
leaderCommit
返回参数
term  当前任期号,
success  结果为真 如果


新的 leader 拥有集群所有已提交日志


#---------------------------------------#---------------------------------------#
4 安全性证明
#---------------------------------------#---------------------------------------#
算法的原理与证明
1 选举安全特性:对于一个给定的任期号,最多只会有一个领导人被选举出来
	每个人每个投票阶段只有一张票
2 领导人只附加原则:领导人绝对不会删除或者覆盖自己的日志,只会增加
3 日志匹配原则:如果两个日志在相同的索引位置的日志条目的任期号相同,那么我们就认为这个日志从头到这个索引位置之间全部完全相同
4 领导人完全特性:如果某个日志条目在某个任期号中已经被提交,那么这个条目必然出现在更大任期号的所有领导人中
5 状态机安全特性:如果一个领导人已经将给定的索引值位置的日志条目应用到状态机中,那么其他任何的服务器在这个索引位置不会应用一个不同的日志

选举限制
1 选民只会投票给任期比自己大,最后一条日志比自己新(任期大于或者等于时索引更大)的候选人
但这真的正确吗？
2 所以新上任的领导者在接收客户端写入命令之前, 需要提交一个no-op(空命令), 携带自己任期号的日志复制到大多数集群节点上才能真正的保证选举限制的成立。


状态机安全性证明(反证法,论文证明方法)

#---------------------------------------#---------------------------------------#
5 工程优化 - 容错性
#---------------------------------------#---------------------------------------#
问题一
领导者崩溃通过选举可以解决,但跟随着与候选人崩溃呢？


问题二
当平均故障时间大于信息交换时间,系统将没有一个稳定的领导者,集群无法工作
广播时间 << 心跳超时时间(一般选择150-300ms) << 平均故障时间

问题三
客户端如何连接raft的server节点?


问题四
领导者提交后返回时崩溃,客户端重试不就导致相同的命令反复执行了吗？
幂等性


问题五
客户端给领导者set a=3 并经行了提交,此时客户端如果从一个未被同步的节点读取a 读不到写后的值


问题六
如果leader被孤立,其他跟随者选举出leader,但是当前leader还是向外提供脏数据怎么办？


问题七
当出现网络分区后,被孤立少数集合的节点无法选举,只会不断的增加自己的任期,分区恢复后由于失联的节点任期更大,
会强行更新所有节点的任期,触发一次重新选举,而又因为其日志不够新,被孤立的节点不可能成为新的leader,所以 其
状态机是安全的,只是触发了一次重新选举,使得集群有一定时间的 不可用。这是完全可以避免的


#---------------------------------------#---------------------------------------#
6 工程优化 - 扩展性
#---------------------------------------#---------------------------------------#
问题一
集群的成员发生变化时,存在某一时刻新老配置共存,进而有选举出两个领导者的可能
	新集群节点在配置变更期间必须获得老配置的多数派投票才能成为leader

问题二
单节点变更时,如果leader挂了,造成一致性问题(丢失已提交日志)如何处理？


问题三
单节点变更时,偶数节点情况下的法定人数模型下的大多数情况(n/2 或者 n/2-1)


问题四
新的服务器没有存储任何日志,领导要复制很长一段时间,此时不能参加选举,否则会使得整体不可用


问题五
如果集群的领导不是新集群的一员,该如何处理？


问题六
被移除的节点如果不及时关闭,会导致选举超时后强行发起投票请求干扰在线集群



#---------------------------------------#---------------------------------------#
7 工程优化 - 性能
#---------------------------------------#---------------------------------------#
1 生成快照(三部分组成快照)
	数据的字节流  
	最后一条日志的index
	集群的配置

2 调节参数
心跳的随机时间:
选举的随机时间:


#---------------------------------------#---------------------------------------#
拓展
#---------------------------------------#---------------------------------------#
CAP原则又称CAP定理,指的是在一个分布式系统中, 一致性 (Consistency)、 可用性 (Availability)、 分区容错性 (Partition tolerance)。 CAP 原则指的是,这三个 要素 最多只能同时实现两点,不可能三者兼顾。 CAP原则又称CAP定理,指的是在一个 分布式系统 中, Consistency(一致性)、 Availability(可用性)、Partition tolerance(分区容错性),三者不可得兼。

在CAP定理的基础上,延伸出比较现实的用于保证分布式系统高可用的BASE定理。
BASE是指服务保证基本可用(Basically Available),可以存在软状态(Soft State),最终能够达到一致性(Eventual Consistency)。
BASE定理是当前分布式系统牺牲强一致性确保高可用的支撑思路。

1 Basically Available 基本可用
出现系统故障时,允许服务部分不可用。
比如在某网站点了个赞,但是5秒之后才出现反馈,而且是“服务异常请重试”。这表示服务确实有异常,但并非完全不可用——至少还有反馈。
2 Soft State 软状态
允许系统存在可用的中间状态。
即允许在数据同步期间,用户的同一请求得到的数据不同(但服务整体还可用),因为处理请求的服务的数据同步状态可能不同。
3 Eventual Consistency 最终一致
强调系统数据最终能够达到一致状态,相对强一致性的系统,这是一种弱一致性。
也就是说虽不要求实时一致的数据同步,但最终应当进入一致状态。

#---------------------------------------#---------------------------------------#
SOLID:
是下面五个面向对象编程中的设计原则的缩写。
1 SRP(Single Responsibility Principle) 单一职责
2 OCP(Open Closed Principle) 开闭原则
3 LSP(Liskov Substitution Principle) 里氏替换
4 ISO(Interface Segregation Principle) 接口隔离
5 DIP(Dependency Inversion Principle) 依赖倒置/依赖反转

#---------------------------------------#---------------------------------------#
DRY:
Don't Repeat Yourself的意思——不要重复你自己。此原则是让我们在开发中把代码和逻辑划分为更小的可重用单元。重复性代码问题尤其是在多人维护的项目中也经常遇到, 修改一处, 其他逻辑部分也要修改极难维护。所以我们可以通过应用单一职责接口隔离等原则尽量拆分系统,模块,类,方法·。使其每一个部件都是职责明确的并且可重用的。

#---------------------------------------#---------------------------------------#
YAGNI:
You aren't gonna need it 的缩写,意思是指你不会需要它。主要思想是不要做过度设计,这是["极限编程"](https://en.wikipedia.org/wiki/Extreme_programming "极限编程")提倡的原则,指的是你自以为有用的功能,实际上都是用不到的。

#---------------------------------------#---------------------------------------#
KISS:
Keep It Simple, Stupid的缩写——保持简单,愚蠢。KISS原则是保持代码可读性和可维护性的重要手段。

因为简单的代码更容易维护和理解。那什么是简单的代码呢？在我看来:每个方法只做一件事、处理很小的事情,行数最多控制在30行左右；变量、包名、方法的命名简单只戳其意；可扩展、易于修改重构。






