#### 第七章 ConfigMap和Secret: 配置应用程序

### 7.1 配置容器化应用程序

```
⾸先来看⼀下容器化应⽤通常是如何被配置的。
开发⼀款新应⽤程序的初期,除了将配置嵌⼊应⽤本⾝,通常会以命令⾏参数的形式配置应⽤。随着配置选项数量的逐渐增多,将配置⽂件化。
另⼀种通⽤的传递配置选项给容器化应⽤程序的⽅法是借助环境变量。应⽤程序主动查找某⼀特定环境变量的值,⽽⾮读取配置⽂件 或者解析命令⾏参数。
```

```
无论你是否在使用ConfigMap 存储配置数据, 以下方法均可被用作配置你的应用程序
1 向容器传递命令行参数
2 为每个容器设置自定义环境变量
3 通过特殊类型的卷将配置文件挂载到容器中
```

### 7.2 向容器传递命令行参数

7.2.1 在Docker中定义命令与参数

```
了解ENTRYPOINT与CMD
Dockerfile中的两种指令分别定义命令与参数这两个部分:
1 ENTRYPOINT定义容器启动时被调⽤的可执⾏程序。
2 CMD指定传递给ENTRYPOINT的参数。
```

```
Dockerfile
FROM ubuntu:latest
RUN apt-get update ; apt-get -y install fortune
ADD fortuneloop.sh /bin/fortuneloop.sh
ENTRYPOINT ["/bin/fortuneloop.sh"]
CMD ["10"]

fortuneloop.sh
#!/bin/bash
trap "exit" SIGINT
INTERVAL=$1
echo Configured to generate new fortune every $INTERVAL seconds
mkdir -p /var/htdocs
while :
do
  echo $(date) Writing fortune to /var/htdocs/index.html
  /usr/games/fortune > /var/htdocs/index.html
  sleep $INTERVAL
done
docker build -t docker.io/gogolang/frotune:args .
docker push docker.io/gogolang/frotune:args

在本地启动该镜像并进⾏测试:
docker run -it gogolang/frotune #报错 可能是shell脚本需要添加执行权限
也可以传递⼀个间隔参数覆盖默认睡眠间隔值:
docker run -it docker.io/gogolang/frotune:args 15
```

7.2.2 在 Kubernetes 中覆盖命令和参数

| docker | kubernetes | 描述  |
| --- | --- | --- |
| ENTRYPOINT | command | 容器中运行的可执行文件 |
| CMD | args | 传给可执行文件的参数 |

**注意** command和args字段在pod创建后⽆法被修改。

```
vim /root/fortune-pod-args.yaml
apiVersion: v1
kind: Pod
metadata:
  name: fortune2s
spec:
  containers:
  - image: luksa/fortune:args
    args: ["2"]
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    emptyDir: {}

kubectl create -f fortune-pod-args.yaml
$ pod/fortune2s created

提⽰ 字符串值⽆须⽤引号标记,数值需要。
```

### 7.3 为容器设置环境变量

```
注意 与容器的命令和参数设置相同,环境变量列表⽆法在pod创建后被修改。
```

7.3.1 在容器定义中指定环境变量

```
fortune-pod-env.yaml #未演示
注意 不要忘记在每个容器中,Kubernetes会⾃动暴露相同命名空间下每个service对应的环境变量。这些环境变量基本上可以被看作⾃动注⼊的配置。
```

7.3.2 在环境变量值中引⽤其他环境变量

可以采⽤$(VAR)语 法在环境变量值中引⽤其他的环境变量。

7.3.3 了解硬编码环境变量的不足之处

pod定义硬编码意味着需要有效区分⽣产环境与开发过程中的pod定义。

### 7.4 利⽤ConfigMap解耦配置

7.4.1 ConfigMap 介绍

Kubernetes允许将配置选项分离到单独的资源对象 ConfigMap中,本质上就是⼀个键/值对映射,值可以是短字⾯量,也可以是完整的配置⽂件。

7.4.2 创建 ConfigMap

```
使⽤指令kubectl 创建 ConfigMap
kubectl create configmap fortune-config --from-literal=sleep-interval=25
$ configmap/fortune-config created
注意 ConfigMap中的键名必须是⼀个合法的DNS⼦域,仅包含数字字母、破折号、下画线以及圆点。⾸位的圆点符号是可选的。

kubectl create configmap myconfigmap --from-literal=foo=bar --from-literal=bar=baz --from-literal=one=two
$ configmap/myconfigmap created

kubectl get configmap fortune-config -o yaml #查看yaml文件
```

```
从文件内容创建 ConfigMap 条目
kubectl create configmap my-config --from-file=config-file.conf
运⾏上述命令时,kubectl会在当前⽬录下查找config-file.conf⽂ 件,并将⽂件内容存储在ConfigMap中以config-file.conf为键名的条⽬下。当然也可以⼿动指定键名:
kubectl create configmap my-config --from-file=customkey=config-file.conf
这条命令会将⽂件内容存在键名为customkey的条⽬下。与使⽤字面量时相同,多次使⽤--from-file参数可增加多个⽂件条⽬。

从文件夹创建 ConfigMap
kubectl create configmap my -config --from-file=/path/to/dir
kubectl会为⽂件夹中的每个⽂件单独创建条⽬,仅限于那些⽂件名可作为合法ConfigMap键名的⽂件。

合并不同选项
kubectl create configmap my-config
--from-file=foo.json            #单独的文件
--from-file=bar=foobar.conf     #自定义键名条目下的文件
--from-file=config-opts/        #完整的文件夹
--from-literal=some=thing       #字面量
```

7.4.3 给容器传递 ConfigMap 条目作为环境变量

如何将映射中的值传递给pod的容器？

设置环境变量

```
通过配置⽂件注⼊环境变量的pod 
fortune-pod-env-configmap.yaml #未演示
apiVersion: v1
kind: Pod
metadata:
  name: fortune-env-from-configmap
spec:
  containers:
  - image: luksa/fortune:env
    env:
    - name: INTERVAL
      valueFrom: 
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    emptyDir: {}
```

```
如果创建pod时引⽤的ConfigMap不存在会发⽣什么？Kubernetes会正常调度pod并尝试运⾏所有的容器。然⽽引⽤不存在的ConfigMap的容器会启动失败,其余容器能正常启动。如果之后创建了这个缺失的ConfigMap,失败容器会⾃动启动,⽆须重新创建pod。
```

7.4.4 一次性传递 ConfigMap 的所有条目作为环境变量

```
暴露ConfigMap的所有条⽬作为环境变量

可以通过envFrom属性字段将所有条⽬暴露作为环境变量,⽽⾮使⽤前⾯例⼦中的env字段。
```

7.4.5 传递 ConfigMap 条目作为命令行参数

```
在字段pod.spec.containers.args中⽆法直接引⽤ConfigMap的条⽬,但是可以利⽤ConfigMap条⽬初始化某个环境变量,然后再在参数字段中引⽤该环境变量
```

```
fortune-pod-args-configmap.yaml #未演示
apiVersion: v1
kind: Pod
metadata:
  name: fortune-args-from-configmap
spec:
  containers:
  - image: luksa/fortune:args
    env:
    - name: INTERVAL
      valueFrom: 
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    args: ["$(INTERVAL)"]
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    emptyDir: {}
```

7.4.6 使用 configMap 卷将条目暴露为文件

```
环境变量或者命令⾏参数值作为配置值通常适⽤于变量值较短的 场景。由于ConfigMap中可以包含完整的配置⽂件内容,当你想要将其暴露给容器时,可以借助前⾯章节提到过的⼀种称为configMap卷的特殊卷格式。
```

```
创建ConfigMap
开启gzip压缩的Nginx配置⽂件:my-nginx-config.conf

kubectl delete configmap fortune-config 
#先删除之前创建的configmap
#然后⽤存储在本地磁盘上的Nginx配置⽂件创建⼀个新的ConfigMap。
#创建⼀个新⽂件夹confimap-files并将上⾯的配置⽂件存储于configmap-files/my-nginx-config.conf中。
#另外在该⽂件夹中添加⼀个名 为sleep-interval的⽂本⽂件,写⼊值为25,使ConfigMap同样包含条目sleep-interval
从⽂件夹创建ConfigMap:
kubectl create configmap fortune-config --from-file=configmap-files

从⽂件创建的ConfigMap的YAML格式定义
kubectl get configmap fortune-config -o yaml
注意 所有条⽬第⼀⾏最后的管道符号表⽰后续的条⽬值是多⾏字⾯量。
```

```
在卷内使⽤ConfigMap的条⽬
创建包含ConfigMap条⽬内容的卷只需要创建⼀个引⽤ConfigMap名称的卷并挂载到容器中。
fortune-pod-configmap-volume.yaml #未演示
apiVersion: v1
kind: Pod
metadata:
  name: fortune-configmap-volume
spec:
  containers:
  - image: luksa/fortune:env
    env:
    - name: INTERVAL
      valueFrom:
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: config
      mountPath: /tmp/whole-fortune-config-volume
      readOnly: true
    ports:
      - containerPort: 80
        name: http
        protocol: TCP
  volumes:
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config

检查Nginx是否使⽤被挂载的配置⽂件
kubectl port-forward fortune-configmap-volume 8080:80 & 

curl -H "Accept-Encoding: gzip" -I localhost:8080

检查被挂载的configMap卷的内容
kubectl exec fortune-config-volume -c web-server ls /etc/nginx/conf.d
```

```
卷内暴露指定的ConfigMap条⽬
可以创建仅包含ConfigMap中部分条⽬的configMap卷--本⽰例中的条⽬my-nginx-config.conf。

通过卷的items属性能够指定哪些条⽬会被暴露作为configMap卷中的⽂件
fortune-pod-configmap-volume-with-itmes.yaml #未演示
apiVersion: v1
kind: Pod
metadata:
  name: fortune-configmap-volume-with-items
spec:
  containers:
  - image: luksa/fortune:env
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d/
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  volumes:
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config
      items:
      - key: my-nginx-config.conf
        path: gzip.conf
```

```
挂载某⼀⽂件夹会隐藏该⽂件夹中已存在的⽂件
假设挂 载⽂件夹是/etc,该⽂件夹通常包含不少重要⽂件。由于/etc下的所有⽂件不存在,容器极⼤可能会损坏。如果你希望添加⽂件⾄某个⽂件夹如/etc,绝不能采⽤这种⽅法。
```

```
ConfigMap独⽴条⽬作为⽂件被挂载且不隐藏⽂件夹中的其他⽂件
如何能挂载ConfigMap对应⽂件⾄现有⽂件夹 的同时不会隐藏现有⽂件。volumeMount额外的subPath字段可以被⽤作 挂载卷中的某个独⽴⽂件或者是⽂件夹,⽆须挂载完整卷。

为configMap卷中的⽂件设置权限
configMap卷中所有⽂件的权限默认被设置为644(-rw-r-r--)。可以通过卷规格定义中的defaultMode属性改变默认权限
fortune-pod-configmap-volume-defaultMode.yaml #未演示
apiVersion: v1
kind: Pod
metadata:
  name: fortune-configmap-volume
spec:
  containers:
  - image: luksa/fortune:env
    env:
    - name: INTERVAL
      valueFrom:
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    name: html-generator
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: config
      mountPath: /tmp/whole-fortune-config-volume
      readOnly: true
  volumes:
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config
      defaultMode: 0660
```

7.4.7 更新应用配置且不重启应用程序

```
使⽤环境变量或者命令⾏参数作为配置源的弊端在于无法在进程运⾏时更新配置。
将ConfigMap暴露为卷可以达到配置热更新的效果,⽆须重新创建pod或者重启容器。

如何修改ConfigMap,同时运⾏在pod中的进程会重载configMap卷中对应的⽂件。
kubectl edit configmap fortune-config
编辑器打开,⾏gzip on改为gzip off,保存⽂件后关闭编辑器。ConfigMap被更新不久之后会⾃动更新卷中的对应⽂件。⽤kubectl exec命令打印出该⽂件内容进⾏确认
kubectl exec fortune-configmap-volume -c web-server -- cat /etc/nginx/conf.d/my-nginx-config.conf
若尚未看到⽂件内容被更新,可稍等⼀会⼉后重试。

通知Nginx重载配置
kubectl exec fortune-configmap-volume -c web-server -- nginx -s reload 

列出configMap卷挂载位置的所有⽂件
kubectl exec -it fortune-configmap-volume -c web-server -- ls -lA /etc/nginx/conf.d
```

### 7.5 使用 Secret给容器传递敏感数据

7.5.1 介绍 Secret

```
Secret结构与ConfifigMap类似,均是键/值对的映射。
1 将Secret条⽬作为环境变量传递给容器
2 将Secret条⽬暴露为卷中的⽂件

Secret只会存储在节点的内存中,永不写⼊物理存储,这样从节点上删除Secret时就不需要擦除磁盘了。
```

7.5.2 默认令牌 Secret 介绍

```
kubectl describe pod
$ Volumes:
$   default-token-7wqb7:
$     Type:        Secret (a volume populated by a Secret)
$     SecretName:  default-token-7wqb7

kubectl get secrets
$ NAME                  TYPE                                  DATA   AGE
$ default-token-7wqb7   kubernetes.io/service-account-token   3      25h

kubectl describe secrets default-token-7wqb7
$ ca.crt:     1025 bytes
$ namespace:  7 bytes
$ token:      eyJhbGci...

kubectl describe pod
$ Containers:
$   web-server:
$     Mounts:
$       /var/run/secrets/kubernetes.io/serviceaccount from default-token-7wqb7 (ro)
注意 default-token Secret默认会被挂载⾄每个容器。可以通过设置pod定义中的automountServiceAccountToken字段为false,或者设置pod使⽤的服务账户中的相同字段为false来关闭这种默认⾏为

kubectl exec {podName} -- ls /var/run/secrets/kubernetes.io/serviceaccount
kubectl exec gitrepo-volume-pod -- ls /var/run/secrets/kubernetes.io/serviceaccount
$ ca.crt
$ namespace
$ token
```

7.5.3 创建Secret

```
改进fortune-serving的Nginx容器的配置,使其能够服务于HTTPS流量。你需要创建私钥和证书,由于需要确保私钥的安全性,可将其与证书同时存⼊Secret。

在本地机器上⽣成证书与私钥⽂件
openssl genrsa -out https.key 2048
openssl req -new -x509 -key https.key -out https.cert -days 3650 -subj /CN=www.kubia-example.com
为了帮助你更好地理解Secret,额外创建⼀个内容为字符串bar的虚拟⽂件foo。
echo bar > foo

使⽤kubectl create secret命令由这三个⽂件创建Secret:
kubectl create secret generic fortune-https --from-file=https.key --from-file=https.cert --from-file=foo
$ secret/fortune-https created
这⾥创建了⼀个名为fortune-https的generic Secret,它包含有两个条⽬:https.key和https.cert
```

7.5.4 对比 ConfigMap 与 Secret

```
Secret的YAML格式定义
kubectl get secret fortune-https -o yaml
$ apiVersion: v1
$ data:
$   foo: YmFyCg==
$   https.cert: LS0t...
$   https.key: LS0tL...

将其与之前创建的ConfigMap的YAML格式定义做对⽐:
kubectl get configmap fortune-config -o yaml

Secret条⽬的内容会被以Base64格式编 码,⽽ConfigMap直接以纯⽂本展⽰。
```

```
为⼆进制数据创建Secret
采⽤Base64编码的原因很简单。Secret的条⽬可以涵盖⼆进制数据,⽽不仅仅是纯⽂本。Base64编码可以将⼆进制数据转换为纯⽂本,以YAML或JSON格式展⽰。

提⽰ Secret甚⾄可以被⽤来存储⾮敏感⼆进制数据。不过值得注意的是,Secret的⼤⼩限于1MB。

在pod中读取Secret条⽬
通过secret卷将Secret暴露给容器之后,Secret条⽬的值会被解码并以真实形式(纯⽂本或⼆进制)写⼊对应的⽂件。通过环境变量暴露Secret条⽬亦是如此。在这两种情况下,应⽤程序均⽆须主动解码,可直接读取⽂件内容或者查找环境变量。
```

7.5.5 在 pod 中使用 Secret

```
vim /root/fortune-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fortune-config
data:
  sleep-interval: "25"
kubectl create -f fortune-config.yaml
$ configmap/fortune-config created

kubectl edit configmap fortune-config #非nginx文件,与书不符
```

```
挂载fortune-secret⾄pod
vim /root/fortune-pod-https.yaml
apiVersion: v1
kind: Pod
metadata:
  name: fortune-https
spec:
  containers:
  - image: luksa/fortune:env
    name: html-generator
    env:
    - name: INTERVAL
      valueFrom: 
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: certs
      mountPath: /etc/nginx/certs/
      readOnly: true
    ports:
    - containerPort: 80
    - containerPort: 443
  volumes:
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config
      items:
      - key: my-nginx-config.conf
        path: https.conf
  - name: certs
    secret:
      secretName: fortune-https
kubectl create -f fortune-pod-https.yaml
$ pod/fortune-https created

测试Nginx是否正使⽤Secret中的证书与密钥
kubectl port-forward fortune-https 8443:443 &

curl https://localhost:8443 -k

若服务器配置正确,会得到⼀个响应,检查响应中服务器证书是否与之前⽣成的证书匹配。curl命令添加选项-v开启详细⽇志
curl https://localhost:8443 -k -v

Secret卷存储于内存
kubectl exec fortune-https -c web-server -- mount | grep certs
```

```
通过环境变量暴露Secret条⽬

了解镜像拉取Secret

在Docker Hub上使⽤私有镜像仓库

创建用于Docker镜像仓库鉴权的Secret
```

```
在pod定义中使⽤docker-registry Secret
pod-with-private-image.yaml


不需要为每个pod指定镜像拉取Secret
```