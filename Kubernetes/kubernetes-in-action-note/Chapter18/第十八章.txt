第十八章 Kubernetes应用扩展

### 18.1 定义自定义API 对象

18.1.1 CustomResourceDefifinitions介绍

```
虚构的⾃定义资源
vim /root/imaginary-kubia-website.yaml
kind: Website
metadata:
  name: kubia
spec:
  gitRepo: https://github.com/luksa/kubia-website-example.git


创建⾃定义对象实例之前,⾸先需要确保Kubernetes能够识别它们:创建⼀个CRD对象
vim /root/website-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: websites.extensions.example.com
spec:
  scope: Namespaced
  group: extensions.example.com
  versions: v1
  names:
    kind: Website
    singular: website
    plural: websites

kubectl create -f website-crd.yaml #待整理
```

```
vim /root/kubia-website.yaml
apiVersion: extensions.example.com/v1
kind: Website
metadata: 
  name: kubia
spec:
  gitRepo: https://github.com/luksa/kubia-website-example.git

删除⾃定义资源实例
kubectl delete website kubia #删除的是⽹站实例,⽽不是⽹站CRD资源
```

18.1.2 使⽤⾃定义控制器⾃动定制资源

```
vim /root/website-controller.yaml

website-controller.yaml

kubectl create serviceaccount website-controller

如果你在集群中启⽤了基于⾓⾊的访问控制(RBAC),Kubernetes将不允许控制器查看⽹站资源或创建Deployment或Service。为了避免 这种情况,需要采⽤创建⼀个集群⾓⾊绑定的⽅式,将website-controller服务账户绑定到cluster-admin ClusterRole,如下⾯的代码清单所⽰。
kubectl create clusterrolebinding website-controller --clusterrole=cluster-admin --serviceaccount=default:website-controller
$ clusterrolebinding.rbac.authorization.k8s.io/website-controller created

再次创建kubia⽹站资源
kubectl create -f kubia-website.yaml
kubectl logs {website-controller-Name}  -c main

kubectl get  deploy,svc,po
```

18.1.3 验证⾃定义对象

18.1.4 为⾃定义对象提供⾃定义API服务器

```
注册⼀个⾃定义API服务器
可以将其部署为⼀ 个pod并通过Service暴露。
下⼀步,为了将它集成到主API服务器中,需要部署⼀个描述APIService资源的YAML列表
APIService YAML定义:
apiVersion: apiregistration.k8s.io/v1
kindL APIService
metadata:
  name:
spec:
  group: extensions.example.com
  version: v1alpha1
  priority: 150
  service:
    name: website
    namespace: default

创建⾃定义客户端
```

### 18.2 使用Kubernetes服务目录扩展Kubernetes

18.2.1 服务⽬录介绍

```
服务⽬录并不会为每种服务类型的API服务器添加⾃定义资源,⽽是将以下四种通⽤API资源引⼊其中
1 ⼀个ClusterServiceBroker,描述⼀个可以提供服务的(外部)系统
2 ⼀个ClusterServiceClass,描述⼀个可供应的服务类型
3 ⼀个ServiceInstance,已配置服务的⼀个实例
4 ⼀个ServiceBinding,表⽰⼀组客户端(pod)和ServiceInstance之间的绑定
```

18.2.2 服务⽬录API服务器与控制器管理器介绍

```
与核⼼Kubernetes类似的是,服务⽬录也是由三个组件组成的分布式系统
1 服务⽬录API服务器
2 作为存储的etcd
3 运⾏所有控制器的控制器管理器
```

18.2.3 Service代理和OpenServiceBroker API

18.2.4 提供服务与使⽤服务

```
kubectl get secret postgres-secret -o yaml
```

18.2.5 解除绑定与取消配置

```
⼀旦你不再需要服务绑定,可以按照删除其他资源的⽅式将其删除:
kubectl delete servicebinding my-postgres-db-binding

如果你不再需要数据库实例,就应该⼀并删除服务实例资源
kubectl delete serviceinstance my-postgres-db
```

18.2.6 服务⽬录给我们带来了什么

```
服务提供者可以通过在任何Kubernetes集群中注册代理,在该集群中暴露服务,这就是服务⽬录的最⼤作⽤
```

### 18.3 基于Kubernetes搭建的平台

18.3.1 红帽 OpenShift容器平台

18.3.2 Deis Workfifiow与Helm

```
Helm是⼀个Kubernetes包管理器(类似于OS包管理器,⽐如Linux中的yum、apt,或者MacOS中的homebrew)。

Helm由两部分组成:
1 ⼀个helm CLI⼯具(客户端). 
2 Tiller,⼀个作为Kubernetes集群内pod运⾏的服务器组件。
```

# A 在多个集群中使用kubectl

```
Google Kubernetes Engine(GKE)
```

# B 使用kubeadm配置多节点集群

# C 使用其他容器运行时

# D Cluster Federation

```
Federated 控制⾯板由三部分组成:
1 ⽤于存储联合API对象的etcd
2 Federation API服务器
3 Federation Controller Manager
```

# 附录

```
安装node js
wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz
tar -xf node-v12.18.1-linux-x64.tar.xz
mkdir /usr/node
mv node-v12.18.1-linux-x64 /usr/node/
vim /etc/bashrc
export PATH=$PATH:/usr/node/node-v12.18.1-linux-x64/bin
. /etc/bashrc
安装yarn
npm install -g yarn
yarn --version
```

```shell
源代码yaml文件地址
https://github.com/luksa/kubernetes-in-action
```

```
未演示的服务
ingress 没用nginx 系统pod模块
storageclass-fast-hostpath.yaml 中 provisioner 参数
```

```
openssl x509 -noout -text -in /etc/kubernetes/pki/apiserver.crt #查看证书过期时间
kubeadm alpha certs check-expiration
kubectl -n kube-system get cm kubeadm-config -oyaml

kubectl get --raw /
```