备份数据库方式
-- 创建一个和原表一样的备份表(包含索引)
create table db_bak like db;

-- 拷贝数据到备份表
INSERT into db_bak select * from db;

-- 确认数据拷贝完成
select * from db_bak;

#----------------------------------------------------------#----------------------------------------------------------#
## MySQL权限管理和数据库备份

命令行模式备份:
>mysqldump -hlocalhost -uroot -p{password}  databaseName tableName > backup_file_location
#备份一张表命令

>mysqldump -hlocalhost -uroot -p{password}  databaseName tableName1 tableName2 > backup_file_location
#备份多张表命令

>mysqldump -hlocalhost -uroot -p{password}  databaseName > backup_file_location
#备份数据库

#----------------------------------------------------------#----------------------------------------------------------#
导入数据库:
docker run --rm --name mysqldb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql
docker cp atguigudb.sql mysqldb:/
docker exec -it mysqldb mysql -uroot -p123456
>source  /atguigudb.sql
>use atguigudb
>desc jobs; #查看table属性

>mysql -u{userName} -p{password} databaseName < backup_file #不推荐

#----------------------------------------------------------#----------------------------------------------------------#
#----------------------------------------------------------#----------------------------------------------------------#
>show engines;
>show databases;
>show tables;

>show create database atguigudb; #查看创建database 的命令
>show create table employees; #查看创建table 的命令

#----------------------------------------------------------#----------------------------------------------------------#
# DML 数据操作语句
#----------------------------------------------------------#----------------------------------------------------------#

1 Insert 添加
2 Update 修改
3 Delete 删除
4 Select 查询 #单独记录

# 基于atguigudb 数据库操作
```mysql
mysql> use atguigudb;
mysql> create table if not exists emp1 (
    id int,
    name varchar(15),
    hire_date date,
    salary double(10,2)
);
mysql> desc emp1;
mysql> select * from emp1;
```

### Insert 添加数据
```mysql
方式一: 一条一条的添加
mysql> insert into emp1 values(1,'Tom','2000-12-21',3400); # 要按照声明的字段先后顺序添加
mysql> select * from emp1;
mysql> insert into emp1(id,hire_date,salary,name) values(2,'1999-09-09',4000,'Jerry'); # 推荐
mysql> select * from emp1;
mysql> insert into emp1(id,salary,name) values(3,4500,'Mary');
mysql> select * from emp1;
mysql> insert into emp1(id,salary,name) values(4,5000,'Jim'),(5,5500,'Jack');

方式二: 将查询结果插入到表中
mysql> select * from emp1;
mysql> insert into emp1(id,name,salary,hire_date) 
    select employee_id,last_name,salary,hire_date 
    from employees 
    where department_id in (70,60);
# emp1 表中要添加数据的字段的长度不能低于 employees 表中查询的字段的长度
# 否则会有添加不成功的风险
mysql> select * from emp1;
```

### Update 更新数据
```mysql
# update ... set ... where ...
mysql> update emp1 set hire_date=curdate() where id=5;
mysql> select * from emp1;
mysql> update emp1 set hire_date=curdate(),salary=6000 where id=4;
```

### Delete 删除数据
```mysql
# delete from emp1 [where 条件]
# delete from emp1; # 会全部删除数据 !!!
mysql> delete from emp1 where id=1; # 删除指定数据

Delete和Truncate相同点: 都能删除数据, 都不会删除表结构
不同点Truncate: 重新设置自增列, 计数器会归零, 不会影响事务
```
# 插入 修改 删除不成功可能是约束造成的 !!!


MySQL8新特性: 计算列
```mysql
CREATE TABLE tb1(
    id INT,
    a INT,
    b INT,
    c INT GENERATED ALWAYS AS (a + b) VIRTUAL
);

INSERT INTO tb1(a,b) VALUES (100,200);
```

#----------------------------------------------------------#----------------------------------------------------------#
# DQL 查询语句！！！
#----------------------------------------------------------#----------------------------------------------------------#

```mysql
>select * from employees;
>select employee_id,email from employees;
```

别名 #使用双引号
>select employee_id emp_id,email from employees; #别名 方式一
>select employee_id emp_id,email AS em from employees; #别名 方式二,AS
>select employee_id emp_id,email AS "邮 箱" from employees; #别名 方式三,用双引号

去除重复行 #distinct 关键字
>select distinct department_id from employees;
>select distinct department_id,salary from employees;


空值参与运算
```mysql
#空值:null,不等同于0 或者 ''
>select employee_id,salary "Month salary",salary * (1 + commission_pct) * 12 "Year salary",commission_pct from employees; #空值参与运算,结果一定也为空
>select employee_id,salary "Month salary",salary * (1 + ifnull(commission_pct,0)) * 12 "Year salary",commission_pct from employees; #ifnull 处理
```

着重号 #反引号
>select * from order; #报错
>select * from `order`; #正确

查询常数
```mysql
>select 'MySQL',employee_id,email from employees;
```

显示表结构
>describe employees;
>desc employees;

# Where 过滤条件
```mysql
>select * from employees where department_id = 90;
>select * from employees where last_name = 'King';
```

### 运算符

算术运算符 #dual 伪表
```mysql
>SELECT 100, 100 + 0, 100 - 0, 100 + 50, 100 + 50 -30, 100 + 35.5, 100 - 35.5 FROM dual;

>SELECT 100, 100 * 1, 100 * 1.0, 100 / 1.0, 100 / 2,100 + 2 * 5 / 2,100 /3, 100 DIV 0 FROM dual;

>SELECT employee_id,last_name,salary FROM employees where employee_id % 2 = 0; 

>SELECT employee_id,salary,salary * 12 annual_sal FROM employees;
```

比较运算符

```mysql
比较运算符用来对表达式左边的操作数和右边的操作数进行比较,比较的结果为真则返回1,比较的结果为假则返回0,其他情况则返回NULL
1 等号运算符(=)判断等号两边的值、字符串或表达式是否相等,如果相等则返回1,不相等则返回0。
>SELECT employee_id,salary FROM employees WHERE salary = 10000;

2 安全等于运算符(<=>)与等于运算符(=)的作用是相似的,唯一的区别是‘<=>'可以用来对NULL进行判断。
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = 0.40;
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct <=> 0.40;

3 不等于运算符(<>和!=)用于判断两边的数字、字符串或者表达式的值是否不相等,如果不相等则返回1,相等则返回0。
>SELECT 1 <> 1, 1 != 2, 'a' != 'b', (3+4) <> (2+6), 'a' != NULL, NULL <> NULL; 

4 空运算符(IS NULL或者ISNULL)判断一个值是否为NULL,如果为NULL则返回1,否则返回0。
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NULL; #常用
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct <=> NULL;
>SELECT employee_id,commission_pct FROM employees WHERE ISNULL(commission_pct);
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = NULL; #查不出来

5 非空运算符(IS NOT NULL)判断一个值是否不为NULL,如果不为NULL则返回1,否则返回0。
>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NOT NULL; #常用
>SELECT employee_id,commission_pct FROM employees WHERE NOT commission_pct <=> NULL;
>SELECT employee_id,commission_pct FROM employees WHERE NOT ISNULL(commission_pct);

6 最小值运算符
>SELECT LEAST (1,0,2), LEAST('b','a','c'), LEAST(1,NULL,2);
select least(first_name,last_name),least(length(first_name),length(last_name)) from employees;
7 最大值运算符
>SELECT GREATEST(1,0,2), GREATEST('b','a','c'), GREATEST(1,NULL,2);

8 BETWEEN AND运算符
>SELECT last_name, salary FROM employees WHERE salary BETWEEN 2500 AND 3500; #AND 
>SELECT last_name, salary FROM employees WHERE salary NOT BETWEEN 2500 AND 3500; #NOT
>SELECT last_name, salary FROM employees WHERE salary < 2500 OR salary > 3500; #OR

9 IN运算符用于判断给定的值是否是IN列表中的一个值,如果是则返回1,否则返回0。如果给定的值为NULL,或者IN列表中存在NULL,则结果为NULL。
>SELECT last_name,salary,department_id FROM employees WHERE department_id IN (10,20,30); 

10 NOT IN运算符用于判断给定的值是否不是IN列表中的一个值,如果不是IN列表中的一个值,则返回1,否则返回0。
>SELECT last_name,salary,department_id FROM employees WHERE salary NOT IN (6000,7000,8000); 

11 LIKE运算符主要用来匹配字符串,通常用于模糊匹配,如果满足条件则返回1,否则返回0。如果给定的值或者匹配条件为NULL,则返回结果为NULL。
“%”:匹配0个或多个字符。
“_”:只能匹配一个字符。
>SELECT last_name FROM employees WHERE last_name LIKE '__o%';

12 REGEXP运算符用来匹配字符串,语法格式为:expr REGEXP 匹配条件。如果expr满足匹配条件,返回1; 如果不满足,则返回0。若expr或匹配条件任意一个为NULL,则结果为NULL。
>SELECT 'shkstart' REGEXP '^s', 'shkstart' REGEXP 't$', 'shkstart' REGEXP 'hk';
```

逻辑运算符

OR ||
AND &&
NOT !
XOR 异或


### 排序与分页

排序 # order by；列的别名只能在order by中使用
ASC(ascend): 升序
DESC(descend): 降序
```mysql
>select employee_id,last_name,salary from employees order by salary desc; #降序
>select employee_id,last_name,salary from employees order by salary; #默认升序

多列排序
>select department_id,last_name,salary from employees order by salary desc,department_id asc;
```

分页 # limit
```mysql
>select employee_id,last_name,salary from employees limit 0,20; #偏移量 + 条目数
>select employee_id,last_name,salary from employees limit 20,20; #第二页

>select employee_id,last_name,salary from employees 
where salary > 6000 
order by salary desc 
limit 0,10;
```

#----------------------------------------------------------#
# 多表查询
#----------------------------------------------------------#

>select employee_id,department_name 
from employees,departments 
where employees.`department_id` = departments.department_id;
# employees.`department_id`
# 用点 '.'
# 表名.列名

>select employee_id,department_name,employees.department_id
from employees,departments 
where employees.`department_id` = departments.department_id;


# 练习:查询员工employee_id,last_name,department_name,city
# 声明的别名必须要使用 !!!
# 不同table的列名相同,必须要添加table名称前缀
>select e.employee_id,last_name,department_name,city
from employees e,departments d,locations l
where e.`department_id` = d.department_id AND d.location_id = l.location_id;


等值连接 and 非等值连接
# 非等值连接
>select last_name,salary,grade_level
from employees e,job_grades j
where e.salary between j.lowest_sal AND j.highest_sal;

自连接 and 非自连接
# 自连接
# 练习:查询员工id,员工姓名及其管理者的id和姓名
>select emp.employee_id,emp.last_name,mgr.employee_id,mgr.last_name
from employees emp,employees mgr
where emp.`manager_id` = mgr.`employee_id`;


内连接 and 外连接 !!!
内连接:合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行
外连接:两个表在连接过程中除了返回满足连接条件的行以外还返回左(或右)表中不满足条件的行,这种连接称为左(或右) 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。
外连接的分类:左外连接、右外连接、满外连接 (都包含交集部分)
# MYSQL 不支持 SQL92语法
# SQL99语法实现内连接 (Join ... on)
>select employee_id,department_name
from employees e join departments d 
on e.department_id = d.department_id; # on 中填写链接条件

>select employee_id,department_name,city 
from employees e join departments d 
on e.department_id = d.department_id
join locations l 
on d.location_id = l.location_id;

# SQL99语法实现外连接
# 左外连接 left outer join
>select last_name,department_name 
from employees e left outer join departments d 
on e.department_id = d.department_id;
# 右外连接
>select last_name,department_name 
from employees e right outer join departments d 
on e.department_id = d.department_id;
# 满外连接
>select last_name,department_name 
from employees e full outer join departments d 
on e.department_id = d.department_id; # mysql不支持 full outer join 语法

union (去除重复记录) and union all (不去除重复记录)
# 七种 jion 的实现
>select employee_id,department_name 
from employees e join departments d 
on e.department_id = d.department_id;

>select employee_id,department_name 
from employees e left join departments d 
on e.department_id = d.department_id;

>select employee_id,department_name 
from employees e right join departments d 
on e.department_id = d.department_id;

>select employee_id,department_name 
from employees e left join departments d 
on e.department_id = d.department_id
where d.department_id is null;

>select employee_id,department_name 
from employees e right join departments d 
on e.department_id = d.department_id
where e.department_id is null;

# MySQL实现满外连接
>select employee_id,department_name 
from employees e left join departments d 
on e.department_id = d.department_id
union all 
select employee_id,department_name 
from employees e right join departments d 
on e.department_id = d.department_id
where e.department_id is null;

# 剔除并集部分
>select employee_id,department_name 
from employees e left join departments d 
on e.department_id = d.department_id
where d.department_id is null
union all
select employee_id,department_name 
from employees e right join departments d 
on e.department_id = d.department_id
where e.department_id is null;


### 单行函数
数值函数
mysql> select rand(),pi() from dual;

字符串函数
mysql> select length('abcd'),ascii('ab'),concat('hello ', 'world') from dual;

日期和时间函数
mysql> select curdate(),curtime(),now() from dual;
mysql> select now(),date_add(now(),interval 1 year),date_sub(now(),interval 1 year) from dual;

流程控制函数
mysql> select last_name,salary,if(salary > 6000,"high 工资","low 工资") "details" from employees;

加密与解密函数 # MD5 sha 不可逆的加密函数
mysql> select md5('mysql'),sha('mysql') from dual;

获取 mysql 信息函数
mysql> select version(),connection_id(),database(),schema(),user() from dual;
mysql> select inet_aton('192.168.152.156'),inet_ntoa(3232274588) from dual;


### 聚合函数
1. 5大常用的聚合函数:
# avg sum 只适用于 数值类型的字段(或变量)
# max min 适用于 数值 字符串 时间 类型的字段(或变量)
# count # avg = sum / count
mysql> select avg(salary),sum(salary),max(salary),min(salary),count(salary) from employees;


2. Group by 的使用
mysql> select department_id,avg(salary),sum(salary) from employees group by department_id;
# select 中出现的非组函数的字段必须声明在group by 中.
mysql> select department_id,job_id,avg(salary),sum(salary) from employees group by department_id,job_id;
# with rollup 了解即可
mysql> select department_id,avg(salary),sum(salary) from employees group by department_id with rollup;


3. Having 的使用 (用来过滤数据)
# 查询各个部门中最高工资比 10000 高的部门信息
mysql> select department_id,max(salary) 
from employees
group by department_id 
having max(salary) > 10000;

# 方式一 (效率高于方式二)
mysql> select department_id,max(salary) 
from employees 
where department_id in (10,20,30,40)
group by department_id 
having max(salary) > 10000;
# 方式二
mysql> select department_id,max(salary) 
from employees
group by department_id 
having max(salary) > 10000 and department_id in (10,20,30,40);
# 当过滤条件中有聚合函数时,则此过滤条件必须声明在having 中


4. SQL 底层执行原理
# SQL99语句 语法&&执行过程
select ...                          # 第二部分
from ... (left/right) join ... on   # 第一部分
(left/right) join ... on (on 链接条件)
where ... and (不包含聚合函数的过滤条件)
group by ...
having ... (包含聚合函数的过滤条件)
order by ... (asc / desc)           # 第三部分
limit ...
# from -> on -> (left/right) join -> where -> group by -> having -> select -> distinct ->
# order by -> limit

# mysql> help select

#----------------------------------------------------------#
# 子查询 ！！！
#----------------------------------------------------------#

mysql> select last_name,salary 
from employees 
where salary > (
    select salary 
    from employees 
    where last_name = "Abel"
);

#子查询的分类
#单行子查询 vs 多行子查询
#相关子查询 vs 不相关子查询

单行子查询

mysql> select employee_id,last_name,salary from employees where salary >
    -> (select salary from employees where employee_id = 149);

#having 中的子查询
mysql> select department_id,min(salary) from employees group by department_id 
    -> having min(salary) > (select min(salary) from employees where department_id = 50);


多行子查询
```mysql
多行比较操作符
1 in
2 any
3 all
4 some
```

```mysql
#查询平均工资最低的部门id
#方式一
select department_id 
from employees
group by department_id 
having avg(salary) = (
	select min(avg_sal) from (
		select avg(salary) avg_sal from employees group by department_id
		) t_dept_avvg_sal
);
#方式二
select department_id 
from employees
group by department_id 
having avg(salary) <= all(
	select avg(salary) avg_sal from employees group by department_id
);

```

相关子查询

```mysql
1 从主查询中获取候选列
2 子查询使用主查询的数据
3 如果满足子查询的条件则返回该行,循环到条件1
```

```mysql
# 查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id
select last_name,salary,department_id
from employees e1
where salary > ( 
    select avg(salary) 
    from employees e2
    where department_id = e1.`department_id`
);
方式二
select e.last_name,e.salary,e.department_id
from employees e,(
	select department_id,avg(salary) avg_sal from employees group by department_id) t_dept_avg_sal
where e.department_id = t_dept_avg_sal.department_id
and e.salary > t_dept_avg_sal.avg_sal;

在select结构中 除了group by 和 limit外,其他位置都可以写子查询！！！
```

```mysql
1 exists
mysql> select employee_id,last_name,job_id,department_id from employees e1 where exists  (select * from employees e2 where e1.employee_id = e2.manager_id);

2 not exists
mysql> select department_id,department_name from departments d where not exists (
select * from employees e where d.department_id = e.department_id);
```

```
mysql> select j.* from jobs j,(select job_id,avg(salary) avg_sal from employees group by job_id order by avg_sal desc limit 0,1) t_job_avg_sal where j.job_id = t_job_avg_sal.job_id;
```


#----------------------------------------------------------#----------------------------------------------------------#
# DDL 数据定义语句
#----------------------------------------------------------#----------------------------------------------------------#
1 create
2 alter
3 drop
4 rename
5 truncate

创建和管理数据库
```mysql
# 使用默认字符集
mysql> create database mytest1; 
mysql> show create database mytest1;

mysql> create database mytest2 character set 'utf8mb4';
mysql> show create database mytest2\g

# 推荐
mysql> create database if not exists mytest1 character set 'gbk';
mysql> show create database mytest1;

mysql> show variables like 'character_%';
```

查看当前使用的数据库
```mysql
mysql> select database() from dual;
mysql> show tables from information_schema;

mysql> alter database mytest1 character set 'utf8';
mysql> drop database if exists mytest1;
```


创建表
```mysql
# 方式一
mysql> CREATE TABLE if not exists `myemp0` (
    `id` int unsigned AUTO_INCREMENT,
    `t_a` varchar(20) NOT NULL DEFAULT "",
    `t_data` DATE,
    `t_c` tinyint(1) DEFAULT 0,
    `t_d` int unsigned DEFAULT 0,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
mysql> show create table myemp1;

# 方式二 可以起别名作为新表字段
mysql> CREATE TABLE `myemp1` AS select employee_id,last_name,salary from employees; 
mysql> select * from myemp2; # 新表会复制数据

mysql> CREATE TABLE `myemp2` AS select employee_id,last_name,salary from employees;
```

修改表
```mysql
mysql> desc myemp1;
# 添加一个字段 
mysql> alter table myemp1 add salary_add double(10,2); # 默认添加到最后一个字段
mysql> alter table myemp1 add phone_number varchar(20) first;
mysql> alter table myemp1 add email varchar(45) after emp_name;

# 修改一个字段
mysql> alter table myemp1 modify emp_name varchar(25);
mysql> alter table myemp1 modify emp_name varchar(45) default '默认值value';

# 重命名一个字段
mysql> alter table myemp1 change salary monthly_salary double(10,2);
mysql> alter table myemp1 change email my_email varchar(50);

# 删除一个字段
mysql> alter table myemp1 drop column my_email;
```

重命名表
```mysql
mysql> rename table myemp1 to myemp12; # 推荐
mysql> alter table myemp12 rename to myemp123;
```

删除表 
# 无法撤销,只能通过日志文件
# 删除表结构,同时删除表中数据,释放表空间
```mysql
mysql> drop table if exists myemp12;
```

清空表
# 清空表中所有数据,但是表结构保留
```mysql
mysql> select * from myemp2;
mysql> truncate table myemp2; #表结构保留
mysql> desc myemp2; 
```

### 对比truncate table 和 delete from
相同点: 都可以实现对表中所有数据的删除,同时保留表结构

不同点:
truncate table: 一旦执行, 表数据全部清除, 同时数据不可以回滚
delete from: 可以删除部分或者所有数据, 同时数据可以回滚


DDL 和 DML 的说明
DDL: 操作一旦执行, 就不可以回滚(操作之后,一定会执行一次commit,且不受 set autocommit = false 影响)
DML: 默认情况, 操作一旦执行, 也不可以回滚. 但设置 set autocommit = false, 则可以回滚

DCL 中 commit 与 rollback的使用
```mysql
mysql> commit;
mysql> select * from myemp2;

mysql> set autocommit = false;
mysql> delete from myemp2;
# truncate table myemp2;
mysql> select * from myemp2;
mysql> rollback;
mysql> select * from myemp2;
mysql> set autocommit = true; #还原
```

阿里开发规范
[强制] 表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。
[强制] 禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字
[强制] 表必备三字段: id, gmt_create, gmt_modified。
[推荐] 表的命名最好是遵循 “业务名称_表的作用”
[推荐] 库名与应用名称尽量一致
[参考] 合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度

MySQL8新特性—DDL的原子化
在MySQL 8.0版本中, InnoDB表的DDL支持事务完整性: 即`DDL操作要么成功要么回滚`。
DDL操作回滚日志写入到data dictionary数据字典表mysql.innodb_ddl_log(该表是隐藏的表, 通过show tables无法看到)中, 用于回滚操作.
通过设置参数, 可将DDL操作日志打印输出到MySQL错误日志中。

#----------------------------------------------------------#----------------------------------------------------------#
# DCL 数据控制语言
#----------------------------------------------------------#----------------------------------------------------------#

1 commit 提交事物 # 一旦执行commit 提交数据,数据将永久保存,无法回滚
2 rollback 回滚事物
3 savepoint
4 grant 赋予权限
5 revoke 回收权限

### commit && rollback

#----------------------------------------------------------#----------------------------------------------------------#
# MySQL数据类型精讲
#----------------------------------------------------------#----------------------------------------------------------#

| 类型             | 类型举例                                                     |
| ---------------- | ------------------------------------------------------------ |
| 整数类型         | TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT         |
| 浮点类型         | FLOAT、DOUBLE                                                |
| 定点数类型       | DECIMAL                                                      |
| 位类型           | BIT                                                          |
| 日期时间类型     | YEAR、TIME、DATE、DATETIME、TIMESTAMP                        |
| 文本字符串类型   | CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT          |
| 枚举类型         | ENUM                                                         |
| 集合类型         | SET                                                          |
| 二进制字符串类型 | BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB      |
| JSON类型         | JSON对象、JSON数组                                           |
| 空间数据类型     | 单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION |

常见数据类型的属性，如下：

| MySQL关键字        | 含义                     |
| ------------------ | ------------------------ |
| NULL               | 数据列可包含NULL值       |
| NOT NULL           | 数据列不允许包含NULL值   |
| DEFAULT            | 默认值                   |
| PRIMARY KEY        | 主键                     |
| AUTO_INCREMENT     | 自动递增，适用于整数类型 |
| UNSIGNED           | 无符号                   |
| CHARACTER SET name | 指定一个字符集           |


# 修改当前的时区
```mysql
SET time_zone = '+9:00';
```


#----------------------------------------------------------#----------------------------------------------------------#
# 约束
#----------------------------------------------------------#----------------------------------------------------------#

查看某个表已有的约束
# information_schema数据库名(系统库)
# table_constraints表名称(专门存储各个表的约束)
```mysql
mysql> SELECT * FROM information_schema.table_constraints WHERE table_name = 'employees';
```

```mysql
create table 表名称(
	字段名  数据类型,
    字段名  数据类型,  
    字段名  数据类型,
    [constraint 约束名] unique key(字段名)
);

CREATE TABLE USER(
    id INT NOT NULL,
    NAME VARCHAR(25),
    PASSWORD VARCHAR(16),
    -- 使用表级约束语法
    CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)
);
# 表示用户名和密码组合不能重复
```

删除唯一约束
- 添加唯一性约束的列上也会自动创建唯一索引。
- 删除唯一约束只能通过删除唯一索引的方式删除。
- 删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。
- 如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。

```mysql
mysql> ALTER TABLE USER DROP INDEX uk_name_pwd;

# 查看表的索引
mysql> show index from USER;
```

删除主键约束
```mysql
alter table 表名称 drop primary key;
```

MySQL 8.0新特性—自增变量的持久化
# auto_increment


FOREIGN KEY 约束
```mysql
create table dept( #主表
	did int primary key,		#部门编号
    dname varchar(50)			#部门名称
);

create table emp(#从表
	eid int primary key,  #员工编号
    ename varchar(5),     #员工姓名
    deptid int,				#员工所在的部门
    foreign key (deptid) references dept(did)   #在从表中指定外键约束
    #emp表的deptid和和dept表的did的数据类型一致, 意义都是表示部门的编号
);

说明：
1 主表dept必须先创建成功, 然后才能创建emp表, 指定外键成功。
2 删除表时, 先删除从表emp, 再删除主表dept
```

约束等级
* `Cascade方式`: 在父表上update/delete记录时, 同步update/delete掉子表的匹配记录 
* `Set null方式`: 在父表上update/delete记录时, 将子表上匹配记录的列设为null, 但是要注意子表的外键列不能为not null  
* `No action方式`: 如果子表中有匹配的记录, 则不允许对父表对应候选键进行update/delete操作  
* `Restrict方式`: 同no action, 都是立即检查外键约束
* `Set default方式`(在可视化工具SQLyog中可能显示空白): 父表有变更时, 子表将外键列设置成一个默认的值, 但Innodb不能识别

如果没有指定等级, 就相当于Restrict方式。
对于外键约束，最好是采用: `ON UPDATE CASCADE ON DELETE RESTRICT` 的方式。


删除外键约束
流程如下：
```mysql
(1)第一步先查看约束名和删除外键约束
SELECT * FROM information_schema.table_constraints WHERE table_name = '表名称';#查看某个表的约束名
ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;

(2)第二步查看索引名和删除索引。（注意，只能手动删除）
SHOW INDEX FROM 表名称; #查看某个表的索引名
ALTER TABLE 从表名 DROP INDEX 索引名;
```


阿里开发规范
[强制] 不得使用外键与级联，一切外键概念必须在应用层解决。 



#----------------------------------------------------------#----------------------------------------------------------#
# 视图(View)
#----------------------------------------------------------#----------------------------------------------------------#

常见的数据库对象

| 对象                | 描述                                                         |
| ------------------- | ------------------------------------------------------------ |
| 表(TABLE)           | 表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录 |
| 数据字典            | 就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看 |
| 约束(CONSTRAINT)    | 执行数据校验的规则，用于保证数据完整性的规则                 |
| 视图(VIEW)          | 一个或者多个数据表里的数据的逻辑显示，视图并不存储数据       |
| 索引(INDEX)         | 用于提高查询性能，相当于书的目录                             |
| 存储过程(PROCEDURE) | 用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境 |
| 存储函数(FUNCTION)  | 用于完成一次特定的计算，具有一个返回值                       |
| 触发器(TRIGGER)     | 相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理 |


视图的理解
- 视图是一种`虚拟表`，本身是`不具有数据`的，占用很少的内存空间，它是 SQL 中的一个重要概念。
- **视图建立在已有表的基础上**, 视图赖以建立的这些表称为**基表**。
- 视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。
- 向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为**存储起来的** **SELECT** **语句** 
- 在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。
- 视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。


创建视图
# 在 CREATE VIEW 语句中嵌入子查询
CREATE [OR REPLACE] 
[ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] 
VIEW 视图名称 [(字段列表)]
AS 查询语句
[WITH [CASCADED|LOCAL] CHECK OPTION]

# 对于单表
```mysql
mysql> CREATE VIEW empvu80
AS 
SELECT  employee_id, last_name, salary
FROM    employees
WHERE   department_id = 80;

mysql> SELECT *
FROM empvu80;
```

创建多表联合视图

# 对于多表
```mysql
mysql> CREATE VIEW vu_emp_dept
AS
SELECT e.employee_id,e.department_id,d.department_name
from employees e join departments d
where e.department_id = d.department_id;
```

查看视图的属性信息
```mysql
# 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）
mysql> SHOW TABLE STATUS LIKE 'vu_emp_dept'\G
```

更新视图的数据
mysql> select * from vu_emp_dept;

# 一般情况
MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。

# 不可更新的视图
要使视图可更新，视图中的行和底层基本表中的行之间必须存在`一对一`的关系。另外当视图定义出现如下情况时，视图不支持更新操作：
- 在定义视图的时候指定了“ALGORITHM = TEMPTABLE”, 视图将不支持INSERT和DELETE操作;
- 视图中不包含基表中所有被定义为非空又未指定默认值的列, 视图将不支持INSERT操作;
- 在定义视图的SELECT语句中使用了`JOIN联合查询`, 视图将不支持INSERT和DELETE操作;
- 在定义视图的SELECT语句后的字段列表中使用了`数学表达式`或`子查询`, 视图将不支持INSERT, 也不支持UPDATE使用了数学表达式、子查询的字段值;
- 在定义视图的SELECT语句后的字段列表中使用`DISTINCT`、`聚合函数`、`GROUP BY`、`HAVING`、`UNION`等, 视图将不支持INSERT、UPDATE、DELETE;
- 在定义视图的SELECT语句中包含了子查询, 而子查询中引用了FROM后面的表, 视图将不支持INSERT、UPDATE、DELETE;
- 视图定义基于一个`不可更新视图`;
- 常量视图。

#----------------------------------------------------------#----------------------------------------------------------#
# 存储过程与函数
#----------------------------------------------------------#----------------------------------------------------------#
存储过程分类
存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下:
1、没有参数(无参数无返回)
2、仅仅带 IN 类型（有参数无返回）
3、仅仅带 OUT 类型（无参数有返回）
4、既带 IN 又带 OUT(有参数有返回)
5、带 INOUT(有参数有返回)
注意: IN、OUT、INOUT 都可以在一个存储过程中带多个。

语法：
```mysql
CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)
[characteristics ...]
BEGIN
	存储过程体
END
```




#----------------------------------------------------------#----------------------------------------------------------#
# 变量 流程控制与游标
#----------------------------------------------------------#----------------------------------------------------------#





#----------------------------------------------------------#----------------------------------------------------------#
# 触发器
#----------------------------------------------------------#----------------------------------------------------------#





#----------------------------------------------------------#----------------------------------------------------------#
# MySQL8其它新特性
#----------------------------------------------------------#----------------------------------------------------------#





