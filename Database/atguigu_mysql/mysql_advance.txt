#----------------------------------------------------------#----------------------------------------------------------#
# MYSQL架构篇
#----------------------------------------------------------#----------------------------------------------------------#

# 字符集
mysql> show variables like 'character%';
mysql> show charset;
vim /etc/my.cnf
[mysqld]
character_set_server=utf8mb4

/var/lib/mysql # 数据库文件存放路径
mysql> show variables like 'datadir';
/usr/share/mysql* # 配置文件
*.frm # 表结构
*.ibd # 默认存放表数据信息
8.0 和 5.7 不一样


用户的创建 修改 删除
mysql> use mysql
mysql> create user 'zhangsan' identified by 'abc123';
mysql> select host,user from user;


#----------------------------------------------------------#----------------------------------------------------------#
# 索引及调优篇
#----------------------------------------------------------#----------------------------------------------------------#

索引是帮助MySQL高效获取数据的数据结构
MySQL索引使用B+树结构

### 索引的分类

在一个表中,主键索引只能有一个,唯一索引可以有多个
1 主键索引:唯一的标识,主键不可重复,只能有一个列作为主键
2 唯一索引:避免重复的列出现,唯一索引可以重复。多个列都可以标识为 唯一索引
3 常规索引: 默认的, index, key关键字来设置
4 全文索引: 在特定的数据库引擎下才有, myisam 快速定位数据

索引不是越多越好
不要对经常变动数据加索引
小数据量的表不需要加索引
索引一般加在常用来查询的字段上!!!

为什么需要数据库 规范化？
信息重复
更新异常
插入异常: 无法正常显示信息
删除异常: 丢失有效的信息



优化思路:
表的设计
索引
SQL语句

慢查询
执行计划
perf


1 开启慢查询
2 account_address 建立索引
3 设置MySQL事务级别
4 explain 查看语句执行细节

show variables like 'slow_query%';
show variables like 'long_query%';
# slow_query_log      慢查询开启状态,ON开启,OFF关闭
# slow_query_log_file 慢查询日志存放的位置(这个目录需要MySQL的运行帐号的可写权限,一般设置为MySQL的数据存放目录)
# long_query_time     查询超过多少秒才记录(才算是慢查询)

一、临时开启(数据库服务重启后失效)
set global slow_query_log_file='/var/lib/mysql/tmp_slow.log';
set global long_query_time=1;
set global slow_query_log='ON';
long_query_time设置后需要打开一个新的查询窗口(会话)才能看到新设置的值。老的查询窗口还是显示之前的值,其实已经改了。
二、永久开启(数据库服务重启后不失效)
修改配置文件my.cnf,在[mysqld]下的下方加入
[mysqld]
slow_query_log = ON
slow_query_log_file = /var/lib/mysql/tmp_slow.log     //linux
long_query_time = 1
然后重启mysql服务。


#----------------------------------------------------------#----------------------------------------------------------#
# 事务篇
#----------------------------------------------------------#----------------------------------------------------------#

什么是事务:要么都成功,要么都失败
事务原则(ACID原则):原子性 一致性 隔离性 持久性

隔离所导致的一些问题:
脏读:一个事务读取了另一个事务未提交的数据
不可重复读:在一个事务内读取表中的某一行数据,多次读取结果不同(这个不一定是错误,只是某些场合不对)
虚读(幻读):指在一个事务内读取到了别的事务插入的数据,导致前后读取不一致


### 三大范式
第一范式
原子性:保证每一列不可再分
第二范式
前提:满足第一范式
每张表只描述一件事情
第三范式
前提:满足第一范式 和第二范式
确保数据表中的每一列数据都和主键直接相关,而不能间接相关

考虑到规范性和性能的问题！！！
关联查询的表不得超过三张表:
1 考虑商业化的需求和目标(成本、用户体验！)数据库的性能更加重要。
2 再规范性能的问题的时候,需要适当考虑一下规范性！
3 故意给某些表增加一些冗余的字段(从多表查询中变为单表查询)
4 故意增加一些计算列(从大数据量降低为小数据量的查询:索引)

#----------------------------------------------------------#----------------------------------------------------------#
# 日志与备份篇
#----------------------------------------------------------#----------------------------------------------------------#
